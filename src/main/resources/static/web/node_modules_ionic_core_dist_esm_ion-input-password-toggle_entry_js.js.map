{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-input-password-toggle_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-input-password-toggle.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, m as printIonWarning, e as getIonMode, h, j as Host, k as getElement } from './index-B_U9CtaY.js';\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\nimport { x as eyeOff, y as eye } from './index-BLV6ykCk.js';\n\nconst iosInputPasswordToggleCss = \"\";\n\nconst mdInputPasswordToggleCss = \"\";\n\nconst InputPasswordToggle = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * @internal\n         */\n        this.type = 'password';\n        this.togglePasswordVisibility = () => {\n            const { inputElRef } = this;\n            if (!inputElRef) {\n                return;\n            }\n            inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n        };\n    }\n    /**\n     * Whenever the input type changes we need to re-run validation to ensure the password\n     * toggle is being used with the correct input type. If the application changes the type\n     * outside of this component we also need to re-render so the correct icon is shown.\n     */\n    onTypeChange(newValue) {\n        if (newValue !== 'text' && newValue !== 'password') {\n            printIonWarning(`[ion-input-password-toggle] - Only inputs of type \"text\" or \"password\" are supported. Input of type \"${newValue}\" is not compatible.`, this.el);\n            return;\n        }\n    }\n    connectedCallback() {\n        const { el } = this;\n        const inputElRef = (this.inputElRef = el.closest('ion-input'));\n        if (!inputElRef) {\n            printIonWarning('[ion-input-password-toggle] - No ancestor ion-input found. This component must be slotted inside of an ion-input.', el);\n            return;\n        }\n        /**\n         * Important: Set the type in connectedCallback because the default value\n         * of this.type may not always be accurate. Usually inputs have the \"password\" type\n         * but it is possible to have the input to initially have the \"text\" type. In that scenario\n         * the wrong icon will show briefly before switching to the correct icon. Setting the\n         * type here allows us to avoid that flicker.\n         */\n        this.type = inputElRef.type;\n    }\n    disconnectedCallback() {\n        this.inputElRef = null;\n    }\n    render() {\n        var _a, _b;\n        const { color, type } = this;\n        const mode = getIonMode(this);\n        const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n        const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n        const isPasswordVisible = type === 'text';\n        return (h(Host, { key: '91bc55664d496fe457518bd112865dd7811d0c17', class: createColorClasses(color, {\n                [mode]: true,\n            }) }, h(\"ion-button\", { key: 'f3e436422110c9cb4d5c0b83500255b24ab4cdef', mode: mode, color: color, fill: \"clear\", shape: \"round\", \"aria-checked\": isPasswordVisible ? 'true' : 'false', \"aria-label\": isPasswordVisible ? 'Hide password' : 'Show password', role: \"switch\", type: \"button\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the password toggle\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onClick: this.togglePasswordVisibility }, h(\"ion-icon\", { key: '5c8b121153f148f92aa7cba0447673a4f6f3ad1e', slot: \"icon-only\", \"aria-hidden\": \"true\", icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon }))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"type\": [\"onTypeChange\"]\n    }; }\n};\nInputPasswordToggle.style = {\n    ios: iosInputPasswordToggleCss,\n    md: mdInputPasswordToggleCss\n};\n\nexport { InputPasswordToggle as ion_input_password_toggle };\n"],"names":["r","registerInstance","m","printIonWarning","e","getIonMode","h","j","Host","k","getElement","c","createColorClasses","x","eyeOff","y","eye","iosInputPasswordToggleCss","mdInputPasswordToggleCss","InputPasswordToggle","constructor","hostRef","type","togglePasswordVisibility","inputElRef","onTypeChange","newValue","el","connectedCallback","closest","disconnectedCallback","render","_a","_b","color","mode","showPasswordIcon","showIcon","hidePasswordIcon","hideIcon","isPasswordVisible","key","class","fill","shape","role","onPointerDown","ev","preventDefault","onClick","slot","icon","watchers","style","ios","md","ion_input_password_toggle"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}
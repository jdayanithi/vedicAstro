{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-input-otp_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-input-otp.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, m as printIonWarning, e as getIonMode, h, F as Fragment, j as Host, k as getElement } from './index-B_U9CtaY.js';\nimport { i as inheritAriaAttributes } from './helpers-1O4D2b7y.js';\nimport { i as isRTL } from './dir-C53feagD.js';\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\n\nconst inputOtpIosCss = \".sc-ion-input-otp-ios-h{--margin-top:0;--margin-end:0;--margin-bottom:0;--margin-start:0;--padding-top:16px;--padding-end:0;--padding-bottom:16px;--padding-start:0;--color:initial;--min-width:40px;--separator-width:8px;--separator-height:var(--separator-width);--separator-border-radius:999px;--separator-color:var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));--highlight-color-focused:var(--ion-color-primary, #0054e9);--highlight-color-valid:var(--ion-color-success, #2dd55b);--highlight-color-invalid:var(--ion-color-danger, #c5000f);--highlight-color:var(--highlight-color-focused);display:block;position:relative;font-size:0.875rem}.input-otp-group.sc-ion-input-otp-ios{-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.native-wrapper.sc-ion-input-otp-ios{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:var(--min-width)}.native-input.sc-ion-input-otp-ios{border-radius:var(--border-radius);width:var(--width);min-width:inherit;height:var(--height);border-width:var(--border-width);border-style:solid;border-color:var(--border-color);background:var(--background);color:var(--color);font-size:inherit;text-align:center;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{caret-color:var(--highlight-color)}.input-otp-description.sc-ion-input-otp-ios{color:var(--ion-color-step-700, var(--ion-text-color-step-300, #4d4d4d));font-size:0.75rem;line-height:1.25rem;text-align:center}.input-otp-description-hidden.sc-ion-input-otp-ios{display:none}.input-otp-separator.sc-ion-input-otp-ios{border-radius:var(--separator-border-radius);-ms-flex-negative:0;flex-shrink:0;width:var(--separator-width);height:var(--separator-height);background:var(--separator-color)}.input-otp-size-small.sc-ion-input-otp-ios-h{--width:40px;--height:40px}.input-otp-size-small.sc-ion-input-otp-ios-h .input-otp-group.sc-ion-input-otp-ios{gap:8px}.input-otp-size-medium.sc-ion-input-otp-ios-h{--width:48px;--height:48px}.input-otp-size-large.sc-ion-input-otp-ios-h{--width:56px;--height:56px}.input-otp-size-medium.sc-ion-input-otp-ios-h .input-otp-group.sc-ion-input-otp-ios,.input-otp-size-large.sc-ion-input-otp-ios-h .input-otp-group.sc-ion-input-otp-ios{gap:12px}.input-otp-shape-round.sc-ion-input-otp-ios-h{--border-radius:16px}.input-otp-shape-soft.sc-ion-input-otp-ios-h{--border-radius:8px}.input-otp-shape-rectangular.sc-ion-input-otp-ios-h{--border-radius:0}.input-otp-fill-outline.sc-ion-input-otp-ios-h{--background:none}.input-otp-fill-solid.sc-ion-input-otp-ios-h{--border-color:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-disabled.sc-ion-input-otp-ios-h{--color:var(--ion-color-step-350, var(--ion-text-color-step-650, #a6a6a6))}.input-otp-fill-outline.input-otp-disabled.sc-ion-input-otp-ios-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.input-otp-disabled.sc-ion-input-otp-ios-h,.input-otp-disabled.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:disabled{cursor:not-allowed}.has-focus.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:focus{--border-color:var(--highlight-color);outline:none}.input-otp-fill-outline.input-otp-readonly.sc-ion-input-otp-ios-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-fill-solid.input-otp-disabled.sc-ion-input-otp-ios-h,.input-otp-fill-solid.input-otp-readonly.sc-ion-input-otp-ios-h{--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));--background:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.ion-touched.ion-invalid.sc-ion-input-otp-ios-h{--highlight-color:var(--highlight-color-invalid)}.ion-valid.sc-ion-input-otp-ios-h{--highlight-color:var(--highlight-color-valid)}.has-focus.ion-valid.sc-ion-input-otp-ios-h,.ion-touched.ion-invalid.sc-ion-input-otp-ios-h{--border-color:var(--highlight-color)}.ion-color.sc-ion-input-otp-ios-h{--highlight-color-focused:var(--ion-color-base)}.input-otp-fill-outline.ion-color.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:focus{border-color:rgba(var(--ion-color-base-rgb), 0.6)}.input-otp-fill-outline.ion-color.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-outline.ion-color.has-focus.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.has-focus.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{border-color:var(--ion-color-danger, #c5000f)}.input-otp-fill-outline.ion-color.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-outline.ion-color.has-focus.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.has-focus.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{border-color:var(--ion-color-success, #2dd55b)}.input-otp-fill-outline.input-otp-disabled.ion-color.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{border-color:rgba(var(--ion-color-base-rgb), 0.3)}.sc-ion-input-otp-ios-h{--border-width:0.55px}.has-focus.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:focus{--border-width:1px}.input-otp-fill-outline.sc-ion-input-otp-ios-h{--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))))}\";\n\nconst inputOtpMdCss = \".sc-ion-input-otp-md-h{--margin-top:0;--margin-end:0;--margin-bottom:0;--margin-start:0;--padding-top:16px;--padding-end:0;--padding-bottom:16px;--padding-start:0;--color:initial;--min-width:40px;--separator-width:8px;--separator-height:var(--separator-width);--separator-border-radius:999px;--separator-color:var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));--highlight-color-focused:var(--ion-color-primary, #0054e9);--highlight-color-valid:var(--ion-color-success, #2dd55b);--highlight-color-invalid:var(--ion-color-danger, #c5000f);--highlight-color:var(--highlight-color-focused);display:block;position:relative;font-size:0.875rem}.input-otp-group.sc-ion-input-otp-md{-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.native-wrapper.sc-ion-input-otp-md{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:var(--min-width)}.native-input.sc-ion-input-otp-md{border-radius:var(--border-radius);width:var(--width);min-width:inherit;height:var(--height);border-width:var(--border-width);border-style:solid;border-color:var(--border-color);background:var(--background);color:var(--color);font-size:inherit;text-align:center;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{caret-color:var(--highlight-color)}.input-otp-description.sc-ion-input-otp-md{color:var(--ion-color-step-700, var(--ion-text-color-step-300, #4d4d4d));font-size:0.75rem;line-height:1.25rem;text-align:center}.input-otp-description-hidden.sc-ion-input-otp-md{display:none}.input-otp-separator.sc-ion-input-otp-md{border-radius:var(--separator-border-radius);-ms-flex-negative:0;flex-shrink:0;width:var(--separator-width);height:var(--separator-height);background:var(--separator-color)}.input-otp-size-small.sc-ion-input-otp-md-h{--width:40px;--height:40px}.input-otp-size-small.sc-ion-input-otp-md-h .input-otp-group.sc-ion-input-otp-md{gap:8px}.input-otp-size-medium.sc-ion-input-otp-md-h{--width:48px;--height:48px}.input-otp-size-large.sc-ion-input-otp-md-h{--width:56px;--height:56px}.input-otp-size-medium.sc-ion-input-otp-md-h .input-otp-group.sc-ion-input-otp-md,.input-otp-size-large.sc-ion-input-otp-md-h .input-otp-group.sc-ion-input-otp-md{gap:12px}.input-otp-shape-round.sc-ion-input-otp-md-h{--border-radius:16px}.input-otp-shape-soft.sc-ion-input-otp-md-h{--border-radius:8px}.input-otp-shape-rectangular.sc-ion-input-otp-md-h{--border-radius:0}.input-otp-fill-outline.sc-ion-input-otp-md-h{--background:none}.input-otp-fill-solid.sc-ion-input-otp-md-h{--border-color:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-disabled.sc-ion-input-otp-md-h{--color:var(--ion-color-step-350, var(--ion-text-color-step-650, #a6a6a6))}.input-otp-fill-outline.input-otp-disabled.sc-ion-input-otp-md-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.input-otp-disabled.sc-ion-input-otp-md-h,.input-otp-disabled.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:disabled{cursor:not-allowed}.has-focus.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:focus{--border-color:var(--highlight-color);outline:none}.input-otp-fill-outline.input-otp-readonly.sc-ion-input-otp-md-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-fill-solid.input-otp-disabled.sc-ion-input-otp-md-h,.input-otp-fill-solid.input-otp-readonly.sc-ion-input-otp-md-h{--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));--background:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.ion-touched.ion-invalid.sc-ion-input-otp-md-h{--highlight-color:var(--highlight-color-invalid)}.ion-valid.sc-ion-input-otp-md-h{--highlight-color:var(--highlight-color-valid)}.has-focus.ion-valid.sc-ion-input-otp-md-h,.ion-touched.ion-invalid.sc-ion-input-otp-md-h{--border-color:var(--highlight-color)}.ion-color.sc-ion-input-otp-md-h{--highlight-color-focused:var(--ion-color-base)}.input-otp-fill-outline.ion-color.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:focus{border-color:rgba(var(--ion-color-base-rgb), 0.6)}.input-otp-fill-outline.ion-color.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-outline.ion-color.has-focus.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.has-focus.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{border-color:var(--ion-color-danger, #c5000f)}.input-otp-fill-outline.ion-color.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-outline.ion-color.has-focus.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.has-focus.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{border-color:var(--ion-color-success, #2dd55b)}.input-otp-fill-outline.input-otp-disabled.ion-color.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{border-color:rgba(var(--ion-color-base-rgb), 0.3)}.sc-ion-input-otp-md-h{--border-width:1px}.has-focus.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:focus{--border-width:2px}.input-otp-fill-outline.sc-ion-input-otp-md-h{--border-color:var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3))}\";\n\nconst InputOTP = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionComplete = createEvent(this, \"ionComplete\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.inheritedAttributes = {};\n        this.inputRefs = [];\n        this.inputId = `ion-input-otp-${inputIds++}`;\n        this.parsedSeparators = [];\n        /**\n         * Tracks whether the user is navigating through input boxes using keyboard navigation\n         * (arrow keys, tab) versus mouse clicks. This is used to determine the appropriate\n         * focus behavior when an input box is focused.\n         */\n        this.isKeyboardNavigation = false;\n        this.inputValues = [];\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         * Available options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.\n         */\n        this.autocapitalize = 'off';\n        /**\n         * If `true`, the user cannot interact with the input.\n         */\n        this.disabled = false;\n        /**\n         * The fill for the input boxes. If `\"solid\"` the input boxes will have a background. If\n         * `\"outline\"` the input boxes will be transparent with a border.\n         */\n        this.fill = 'outline';\n        /**\n         * The number of input boxes to display.\n         */\n        this.length = 4;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * The shape of the input boxes.\n         * If \"round\" they will have an increased border radius.\n         * If \"rectangular\" they will have no border radius.\n         * If \"soft\" they will have a soft border radius.\n         */\n        this.shape = 'round';\n        /**\n         * The size of the input boxes.\n         */\n        this.size = 'medium';\n        /**\n         * The type of input allowed in the input boxes.\n         */\n        this.type = 'number';\n        /**\n         * The value of the input group.\n         */\n        this.value = '';\n        /**\n         * Handles the focus behavior for the input OTP component.\n         *\n         * Focus behavior:\n         * 1. Keyboard navigation: Allow normal focus movement\n         * 2. Mouse click:\n         *    - If clicked box has value: Focus that box\n         *    - If clicked box is empty: Focus first empty box\n         *\n         * Emits the `ionFocus` event when the input group gains focus.\n         */\n        this.onFocus = (index) => (event) => {\n            var _a;\n            const { inputRefs } = this;\n            // Only emit ionFocus and set the focusedValue when the\n            // component first gains focus\n            if (!this.hasFocus) {\n                this.ionFocus.emit(event);\n                this.focusedValue = this.value;\n            }\n            this.hasFocus = true;\n            let finalIndex = index;\n            if (!this.isKeyboardNavigation) {\n                // If the clicked box has a value, focus it\n                // Otherwise focus the first empty box\n                const targetIndex = this.inputValues[index] ? index : this.getFirstEmptyIndex();\n                finalIndex = targetIndex === -1 ? this.length - 1 : targetIndex;\n                // Focus the target box\n                (_a = this.inputRefs[finalIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n            }\n            // Update tabIndexes to match the focused box\n            inputRefs.forEach((input, i) => {\n                input.tabIndex = i === finalIndex ? 0 : -1;\n            });\n            // Reset the keyboard navigation flag\n            this.isKeyboardNavigation = false;\n        };\n        /**\n         * Handles the blur behavior for the input OTP component.\n         * Emits the `ionBlur` event when the input group loses focus.\n         */\n        this.onBlur = (event) => {\n            const { inputRefs } = this;\n            const relatedTarget = event.relatedTarget;\n            // Do not emit blur if we're moving to another input box in the same component\n            const isInternalFocus = relatedTarget != null && inputRefs.includes(relatedTarget);\n            if (!isInternalFocus) {\n                this.hasFocus = false;\n                // Reset tabIndexes when focus leaves the component\n                this.updateTabIndexes();\n                // Always emit ionBlur when focus leaves the component\n                this.ionBlur.emit(event);\n                // Only emit ionChange if the value has actually changed\n                if (this.focusedValue !== this.value) {\n                    this.emitIonChange(event);\n                }\n            }\n        };\n        /**\n         * Handles keyboard navigation and input for the OTP component.\n         *\n         * Navigation:\n         * - Backspace: Clears current input and moves to previous box if empty\n         * - Arrow Left/Right: Moves focus between input boxes\n         * - Tab: Allows normal tab navigation between components\n         *\n         * Input Behavior:\n         * - Validates input against the allowed pattern\n         * - When entering a key in a filled box:\n         *   - Shifts existing values right if there is room\n         *   - Updates the value of the input group\n         *   - Prevents default behavior to avoid automatic focus shift\n         */\n        this.onKeyDown = (index) => (event) => {\n            const { length } = this;\n            const rtl = isRTL(this.el);\n            const input = event.target;\n            // Meta shortcuts are used to copy, paste, and select text\n            // We don't want to handle these keys here\n            const metaShortcuts = ['a', 'c', 'v', 'x', 'r', 'z', 'y'];\n            const isTextSelection = input.selectionStart !== input.selectionEnd;\n            // Return if the key is a meta shortcut or the input value\n            // text is selected and let the onPaste / onInput handler manage it\n            if (isTextSelection || ((event.metaKey || event.ctrlKey) && metaShortcuts.includes(event.key.toLowerCase()))) {\n                return;\n            }\n            if (event.key === 'Backspace') {\n                if (this.inputValues[index]) {\n                    // Shift all values to the right of the current index left by one\n                    for (let i = index; i < length - 1; i++) {\n                        this.inputValues[i] = this.inputValues[i + 1];\n                    }\n                    // Clear the last box\n                    this.inputValues[length - 1] = '';\n                    // Update all inputRefs to match inputValues\n                    for (let i = 0; i < length; i++) {\n                        this.inputRefs[i].value = this.inputValues[i] || '';\n                    }\n                    this.updateValue(event);\n                    event.preventDefault();\n                }\n                else if (!this.inputValues[index] && index > 0) {\n                    // If current input is empty, move to previous input\n                    this.focusPrevious(index);\n                }\n            }\n            else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n                this.isKeyboardNavigation = true;\n                event.preventDefault();\n                const isLeft = event.key === 'ArrowLeft';\n                const shouldMoveNext = (isLeft && rtl) || (!isLeft && !rtl);\n                // Only allow moving to the next input if the current has a value\n                if (shouldMoveNext) {\n                    if (this.inputValues[index] && index < length - 1) {\n                        this.focusNext(index);\n                    }\n                }\n                else {\n                    this.focusPrevious(index);\n                }\n            }\n            else if (event.key === 'Tab') {\n                this.isKeyboardNavigation = true;\n                // Let all tab events proceed normally\n                return;\n            }\n            // If the input box contains a value and the key being\n            // entered is a valid key for the input box update the value\n            // and shift the values to the right if there is room.\n            if (this.inputValues[index] && this.validKeyPattern.test(event.key)) {\n                if (!this.inputValues[length - 1]) {\n                    for (let i = length - 1; i > index; i--) {\n                        this.inputValues[i] = this.inputValues[i - 1];\n                        this.inputRefs[i].value = this.inputValues[i] || '';\n                    }\n                }\n                this.inputValues[index] = event.key;\n                this.inputRefs[index].value = event.key;\n                this.updateValue(event);\n                // Prevent default to avoid the browser from\n                // automatically moving the focus to the next input\n                event.preventDefault();\n            }\n        };\n        this.onInput = (index) => (event) => {\n            const { length, validKeyPattern } = this;\n            const value = event.target.value;\n            // If the value is longer than 1 character (autofill), split it into\n            // characters and filter out invalid ones\n            if (value.length > 1) {\n                const validChars = value\n                    .split('')\n                    .filter((char) => validKeyPattern.test(char))\n                    .slice(0, length);\n                // If there are no valid characters coming from the\n                // autofill, all input refs have to be cleared after the\n                // browser has finished the autofill behavior\n                if (validChars.length === 0) {\n                    requestAnimationFrame(() => {\n                        this.inputRefs.forEach((input) => {\n                            input.value = '';\n                        });\n                    });\n                }\n                // Update the value of the input group and emit the input change event\n                this.value = validChars.join('');\n                this.updateValue(event);\n                // Focus the first empty input box or the last input box if all boxes\n                // are filled after a small delay to ensure the input boxes have been\n                // updated before moving the focus\n                setTimeout(() => {\n                    var _a;\n                    const nextIndex = validChars.length < length ? validChars.length : length - 1;\n                    (_a = this.inputRefs[nextIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n                }, 20);\n                return;\n            }\n            // Only allow input if it matches the pattern\n            if (value.length > 0 && !validKeyPattern.test(value)) {\n                this.inputRefs[index].value = '';\n                this.inputValues[index] = '';\n                return;\n            }\n            // For single character input, fill the current box\n            this.inputValues[index] = value;\n            this.updateValue(event);\n            if (value.length > 0) {\n                this.focusNext(index);\n            }\n        };\n        /**\n         * Handles pasting text into the input OTP component.\n         * This function prevents the default paste behavior and\n         * validates the pasted text against the allowed pattern.\n         * It then updates the value of the input group and focuses\n         * the next empty input after pasting.\n         */\n        this.onPaste = (event) => {\n            var _a, _b, _c;\n            const { inputRefs, length, validKeyPattern } = this;\n            event.preventDefault();\n            const pastedText = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text');\n            // If there is no pasted text, still emit the input change event\n            // because this is how the native input element behaves\n            // but return early because there is nothing to paste.\n            if (!pastedText) {\n                this.emitIonInput(event);\n                return;\n            }\n            const validChars = pastedText\n                .split('')\n                .filter((char) => validKeyPattern.test(char))\n                .slice(0, length);\n            // Always paste starting at the first box\n            validChars.forEach((char, index) => {\n                if (index < length) {\n                    this.inputRefs[index].value = char;\n                    this.inputValues[index] = char;\n                }\n            });\n            // Update the value so that all input boxes are updated\n            this.value = validChars.join('');\n            this.updateValue(event);\n            // Focus the next empty input after pasting\n            // If all boxes are filled, focus the last input\n            const nextEmptyIndex = validChars.length;\n            if (nextEmptyIndex < length) {\n                (_b = inputRefs[nextEmptyIndex]) === null || _b === void 0 ? void 0 : _b.focus();\n            }\n            else {\n                (_c = inputRefs[length - 1]) === null || _c === void 0 ? void 0 : _c.focus();\n            }\n        };\n    }\n    /**\n     * Sets focus to an input box.\n     * @param index - The index of the input box to focus (0-based).\n     * If provided and the input box has a value, the input box at that index will be focused.\n     * Otherwise, the first empty input box or the last input if all are filled will be focused.\n     */\n    async setFocus(index) {\n        var _a, _b;\n        if (typeof index === 'number') {\n            const validIndex = Math.max(0, Math.min(index, this.length - 1));\n            (_a = this.inputRefs[validIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        else {\n            const tabbableIndex = this.getTabbableIndex();\n            (_b = this.inputRefs[tabbableIndex]) === null || _b === void 0 ? void 0 : _b.focus();\n        }\n    }\n    valueChanged() {\n        this.initializeValues();\n        this.updateTabIndexes();\n    }\n    /**\n     * Processes the separators prop into an array of numbers.\n     *\n     * If the separators prop is not provided, returns an empty array.\n     * If the separators prop is 'all', returns an array of all valid positions (1 to length-1).\n     * If the separators prop is an array, returns it as is.\n     * If the separators prop is a string, splits it by commas and parses each part as a number.\n     *\n     * If the separators are greater than the input length, it will warn and ignore the separators.\n     */\n    processSeparators() {\n        const { separators, length } = this;\n        if (separators === undefined) {\n            this.parsedSeparators = [];\n            return;\n        }\n        if (typeof separators === 'string' && separators !== 'all') {\n            const isValidFormat = /^(\\d+)(,\\d+)*$/.test(separators);\n            if (!isValidFormat) {\n                printIonWarning(`[ion-input-otp] - Invalid separators format. Expected a comma-separated list of numbers, an array of numbers, or \"all\". Received: ${separators}`, this.el);\n                this.parsedSeparators = [];\n                return;\n            }\n        }\n        let separatorValues;\n        if (separators === 'all') {\n            separatorValues = Array.from({ length: length - 1 }, (_, i) => i + 1);\n        }\n        else if (Array.isArray(separators)) {\n            separatorValues = separators;\n        }\n        else {\n            separatorValues = separators\n                .split(',')\n                .map((pos) => parseInt(pos, 10))\n                .filter((pos) => !isNaN(pos));\n        }\n        // Check for duplicate separator positions\n        const duplicates = separatorValues.filter((pos, index) => separatorValues.indexOf(pos) !== index);\n        if (duplicates.length > 0) {\n            printIonWarning(`[ion-input-otp] - Duplicate separator positions are not allowed. Received: ${separators}`, this.el);\n        }\n        const invalidSeparators = separatorValues.filter((pos) => pos > length);\n        if (invalidSeparators.length > 0) {\n            printIonWarning(`[ion-input-otp] - The following separator positions are greater than the input length (${length}): ${invalidSeparators.join(', ')}. These separators will be ignored.`, this.el);\n        }\n        this.parsedSeparators = separatorValues.filter((pos) => pos <= length);\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAriaAttributes(this.el);\n        this.processSeparators();\n        this.initializeValues();\n    }\n    componentDidLoad() {\n        this.updateTabIndexes();\n    }\n    /**\n     * Get the regex pattern for allowed characters.\n     * If a pattern is provided, use it to create a regex pattern\n     * Otherwise, use the default regex pattern based on type\n     */\n    get validKeyPattern() {\n        return new RegExp(`^${this.getPattern()}$`, 'u');\n    }\n    /**\n     * Gets the string pattern to pass to the input element\n     * and use in the regex for allowed characters.\n     */\n    getPattern() {\n        const { pattern, type } = this;\n        if (pattern) {\n            return pattern;\n        }\n        return type === 'number' ? '[\\\\p{N}]' : '[\\\\p{L}\\\\p{N}]';\n    }\n    /**\n     * Get the default value for inputmode.\n     * If inputmode is provided, use it.\n     * Otherwise, use the default inputmode based on type\n     */\n    getInputmode() {\n        const { inputmode } = this;\n        if (inputmode) {\n            return inputmode;\n        }\n        if (this.type == 'number') {\n            return 'numeric';\n        }\n        else {\n            return 'text';\n        }\n    }\n    /**\n     * Initializes the input values array based on the current value prop.\n     * This splits the value into individual characters and validates them against\n     * the allowed pattern. The values are then used as the values in the native\n     * input boxes and the value of the input group is updated.\n     */\n    initializeValues() {\n        // Clear all input values\n        this.inputValues = Array(this.length).fill('');\n        // If the value is null, undefined, or an empty string, return\n        if (this.value == null || String(this.value).length === 0) {\n            return;\n        }\n        // Split the value into individual characters and validate\n        // them against the allowed pattern\n        const chars = String(this.value).split('').slice(0, this.length);\n        chars.forEach((char, index) => {\n            if (this.validKeyPattern.test(char)) {\n                this.inputValues[index] = char;\n            }\n        });\n        // Update the value without emitting events\n        this.value = this.inputValues.join('');\n    }\n    /**\n     * Updates the value of the input group.\n     * This updates the value of the input group and emits an `ionChange` event.\n     * If all of the input boxes are filled, it emits an `ionComplete` event.\n     */\n    updateValue(event) {\n        const { inputValues, length } = this;\n        const newValue = inputValues.join('');\n        this.value = newValue;\n        this.emitIonInput(event);\n        if (newValue.length === length) {\n            this.ionComplete.emit({ value: newValue });\n        }\n    }\n    /**\n     * Emits an `ionChange` event.\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitIonChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        this.ionChange.emit({ value: newValue, event });\n    }\n    /**\n     * Emits an `ionInput` event.\n     * This is used to emit the input value when the user types,\n     * backspaces, or pastes.\n     */\n    emitIonInput(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        this.ionInput.emit({ value: newValue, event });\n    }\n    /**\n     * Focuses the next input box.\n     */\n    focusNext(currentIndex) {\n        var _a;\n        const { inputRefs, length } = this;\n        if (currentIndex < length - 1) {\n            (_a = inputRefs[currentIndex + 1]) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n    }\n    /**\n     * Focuses the previous input box.\n     */\n    focusPrevious(currentIndex) {\n        var _a;\n        const { inputRefs } = this;\n        if (currentIndex > 0) {\n            (_a = inputRefs[currentIndex - 1]) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n    }\n    /**\n     * Searches through the input values and returns the index\n     * of the first empty input.\n     * Returns -1 if all inputs are filled.\n     */\n    getFirstEmptyIndex() {\n        var _a;\n        const { inputValues, length } = this;\n        // Create an array of the same length as the input OTP\n        // and fill it with the input values\n        const values = Array.from({ length }, (_, i) => inputValues[i] || '');\n        return (_a = values.findIndex((value) => !value || value === '')) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Returns the index of the input that should be tabbed to.\n     * If all inputs are filled, returns the last input's index.\n     * Otherwise, returns the index of the first empty input.\n     */\n    getTabbableIndex() {\n        const { length } = this;\n        const firstEmptyIndex = this.getFirstEmptyIndex();\n        return firstEmptyIndex === -1 ? length - 1 : firstEmptyIndex;\n    }\n    /**\n     * Updates the tabIndexes for the input boxes.\n     * This is used to ensure that the correct input is\n     * focused when the user navigates using the tab key.\n     */\n    updateTabIndexes() {\n        const { inputRefs, inputValues, length } = this;\n        // Find first empty index after any filled boxes\n        let firstEmptyIndex = -1;\n        for (let i = 0; i < length; i++) {\n            if (!inputValues[i] || inputValues[i] === '') {\n                firstEmptyIndex = i;\n                break;\n            }\n        }\n        // Update tabIndex and aria-hidden for all inputs\n        inputRefs.forEach((input, index) => {\n            const shouldBeTabbable = firstEmptyIndex === -1 ? index === length - 1 : firstEmptyIndex === index;\n            input.tabIndex = shouldBeTabbable ? 0 : -1;\n            // If the input is empty and not the first empty input,\n            // it should be hidden from screen readers.\n            const isEmpty = !inputValues[index] || inputValues[index] === '';\n            input.setAttribute('aria-hidden', isEmpty && !shouldBeTabbable ? 'true' : 'false');\n        });\n    }\n    /**\n     * Determines if a separator should be shown for a given index by\n     * checking if the index is included in the parsed separators array.\n     */\n    showSeparator(index) {\n        const { length } = this;\n        return this.parsedSeparators.includes(index + 1) && index < length - 1;\n    }\n    render() {\n        var _a, _b;\n        const { autocapitalize, color, disabled, el, fill, hasFocus, inheritedAttributes, inputId, inputRefs, inputValues, length, readonly, shape, size, } = this;\n        const mode = getIonMode(this);\n        const inputmode = this.getInputmode();\n        const tabbableIndex = this.getTabbableIndex();\n        const pattern = this.getPattern();\n        const hasDescription = ((_b = (_a = el.querySelector('.input-otp-description')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) !== '';\n        return (h(Host, { key: 'df8fca036cedea0812185a02e3b655d7d76285e0', class: createColorClasses(color, {\n                [mode]: true,\n                'has-focus': hasFocus,\n                [`input-otp-size-${size}`]: true,\n                [`input-otp-shape-${shape}`]: true,\n                [`input-otp-fill-${fill}`]: true,\n                'input-otp-disabled': disabled,\n                'input-otp-readonly': readonly,\n            }) }, h(\"div\", Object.assign({ key: '831be3f939cf037f0eb8d7e37e0afd4ef9a3c2c5', role: \"group\", \"aria-label\": \"One-time password input\", class: \"input-otp-group\" }, inheritedAttributes), Array.from({ length }).map((_, index) => (h(Fragment, null, h(\"div\", { class: \"native-wrapper\" }, h(\"input\", { class: \"native-input\", id: `${inputId}-${index}`, \"aria-label\": `Input ${index + 1} of ${length}`, type: \"text\", autoCapitalize: autocapitalize, inputmode: inputmode, pattern: pattern, disabled: disabled, readOnly: readonly, tabIndex: index === tabbableIndex ? 0 : -1, value: inputValues[index] || '', autocomplete: \"one-time-code\", ref: (el) => (inputRefs[index] = el), onInput: this.onInput(index), onBlur: this.onBlur, onFocus: this.onFocus(index), onKeyDown: this.onKeyDown(index), onPaste: this.onPaste })), this.showSeparator(index) && h(\"div\", { class: \"input-otp-separator\" }))))), h(\"div\", { key: '5311fedc34f7af3efd5f69e5a3d768055119c4f1', class: {\n                'input-otp-description': true,\n                'input-otp-description-hidden': !hasDescription,\n            } }, h(\"slot\", { key: '9e8afa2f7fa76c3092582dc27770fdf565a1b9ba' }))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"],\n        \"separators\": [\"processSeparators\"],\n        \"length\": [\"processSeparators\"]\n    }; }\n};\nlet inputIds = 0;\nInputOTP.style = {\n    ios: inputOtpIosCss,\n    md: inputOtpMdCss\n};\n\nexport { InputOTP as ion_input_otp };\n"],"names":["r","registerInstance","d","createEvent","m","printIonWarning","e","getIonMode","h","F","Fragment","j","Host","k","getElement","i","inheritAriaAttributes","isRTL","c","createColorClasses","inputOtpIosCss","inputOtpMdCss","InputOTP","constructor","hostRef","ionInput","ionChange","ionComplete","ionBlur","ionFocus","inheritedAttributes","inputRefs","inputId","inputIds","parsedSeparators","isKeyboardNavigation","inputValues","hasFocus","autocapitalize","disabled","fill","length","readonly","shape","size","type","value","onFocus","index","event","_a","emit","focusedValue","finalIndex","targetIndex","getFirstEmptyIndex","focus","forEach","input","tabIndex","onBlur","relatedTarget","isInternalFocus","includes","updateTabIndexes","emitIonChange","onKeyDown","rtl","el","target","metaShortcuts","isTextSelection","selectionStart","selectionEnd","metaKey","ctrlKey","key","toLowerCase","updateValue","preventDefault","focusPrevious","isLeft","shouldMoveNext","focusNext","validKeyPattern","test","onInput","validChars","split","filter","char","slice","requestAnimationFrame","join","setTimeout","nextIndex","onPaste","_b","_c","pastedText","clipboardData","getData","emitIonInput","nextEmptyIndex","setFocus","_this","_asyncToGenerator","validIndex","Math","max","min","tabbableIndex","getTabbableIndex","valueChanged","initializeValues","processSeparators","separators","undefined","isValidFormat","separatorValues","Array","from","_","isArray","map","pos","parseInt","isNaN","duplicates","indexOf","invalidSeparators","componentWillLoad","componentDidLoad","RegExp","getPattern","pattern","getInputmode","inputmode","String","chars","newValue","toString","currentIndex","values","findIndex","firstEmptyIndex","shouldBeTabbable","isEmpty","setAttribute","showSeparator","render","color","mode","hasDescription","querySelector","textContent","trim","class","Object","assign","role","id","autoCapitalize","readOnly","autocomplete","ref","watchers","style","ios","md","ion_input_otp"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}
{
  "version": 3,
  "sources": ["src/app/services/notification.service.ts", "src/app/pages/notifications/notification-form.component.ts", "src/app/pages/notifications/notifications-page.component.ts", "src/app/pages/notifications/notifications.routes.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface Notification {\r\n  notificationId?: number;\r\n  loginId?: number;  // Made optional for broadcast notifications\r\n  isBroadcast?: boolean;  // New field\r\n  title: string;\r\n  message: string;\r\n  isRead?: boolean;\r\n  notificationType: 'push' | 'email';\r\n  startDate?: string;\r\n  expiryDate?: string;\r\n  createdAt?: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NotificationService {\r\n  private apiUrl = `${environment.apiUrl}/notifications`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getNotifications(): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(this.apiUrl);\r\n  }\r\n\r\n  getNotificationById(id: number): Observable<Notification> {\r\n    return this.http.get<Notification>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  getNotificationsByLoginId(loginId: number): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${this.apiUrl}/user/${loginId}`);\r\n  }\r\n\r\n  createNotification(notification: Notification): Observable<Notification> {\r\n    return this.http.post<Notification>(this.apiUrl, notification);\r\n  }\r\n\r\n  updateNotification(id: number, notification: Notification): Observable<Notification> {\r\n    return this.http.put<Notification>(`${this.apiUrl}/${id}`, notification);\r\n  }\r\n\r\n  deleteNotification(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n}\r\n", "import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { NotificationService, Notification } from '../../services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-notification-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatCheckboxModule\r\n  ],  template: `\r\n    <h2 mat-dialog-title>{{editMode ? 'Edit' : 'Create'}} Notification</h2>\r\n    <mat-dialog-content>\r\n      <form [formGroup]=\"notificationForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"broadcast-toggle\">\r\n          <mat-checkbox formControlName=\"isBroadcast\" (change)=\"onBroadcastChange()\">\r\n            Send to All Users (Broadcast)\r\n          </mat-checkbox>\r\n        </div>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\" *ngIf=\"!notificationForm.get('isBroadcast')?.value\">\r\n          <mat-label>Login ID</mat-label>\r\n          <input matInput formControlName=\"loginId\" type=\"number\">\r\n          <mat-error *ngIf=\"notificationForm.get('loginId')?.hasError('required')\">\r\n            Login ID is required for specific user notifications\r\n          </mat-error>\r\n          <mat-hint>Leave empty and check broadcast above to send to all users</mat-hint>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Title</mat-label>\r\n          <input matInput formControlName=\"title\" required>\r\n          <mat-error *ngIf=\"notificationForm.get('title')?.hasError('required')\">\r\n            Title is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Message</mat-label>\r\n          <textarea matInput formControlName=\"message\" rows=\"4\" required></textarea>\r\n          <mat-error *ngIf=\"notificationForm.get('message')?.hasError('required')\">\r\n            Message is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Notification Type</mat-label>\r\n          <mat-select formControlName=\"notificationType\" required>\r\n            <mat-option value=\"push\">Push Notification</mat-option>\r\n            <mat-option value=\"email\">Email</mat-option>\r\n          </mat-select>\r\n          <mat-error *ngIf=\"notificationForm.get('notificationType')?.hasError('required')\">\r\n            Notification type is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Start Date</mat-label>\r\n          <input matInput [matDatepicker]=\"startPicker\" formControlName=\"startDate\">\r\n          <mat-hint>Leave empty for immediate delivery</mat-hint>\r\n          <mat-datepicker-toggle matSuffix [for]=\"startPicker\"></mat-datepicker-toggle>\r\n          <mat-datepicker #startPicker></mat-datepicker>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Expiry Date</mat-label>\r\n          <input matInput [matDatepicker]=\"expiryPicker\" formControlName=\"expiryDate\">\r\n          <mat-hint>Leave empty for no expiry</mat-hint>\r\n          <mat-datepicker-toggle matSuffix [for]=\"expiryPicker\"></mat-datepicker-toggle>\r\n          <mat-datepicker #expiryPicker></mat-datepicker>\r\n        </mat-form-field>\r\n\r\n        <div class=\"checkbox-container\">\r\n          <mat-checkbox formControlName=\"isRead\">Mark as Read</mat-checkbox>\r\n        </div>\r\n\r\n        <div class=\"button-container\">\r\n          <button mat-button type=\"button\" mat-dialog-close>Cancel</button>\r\n          <button mat-raised-button color=\"primary\" type=\"submit\" \r\n                  [disabled]=\"notificationForm.invalid || isLoading\">\r\n            {{isLoading ? 'Saving...' : (editMode ? 'Update' : 'Create')}}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-dialog-content>\r\n  `,  styles: [`\r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 15px;\r\n    }\r\n    \r\n    .checkbox-container {\r\n      margin: 16px 0;\r\n    }\r\n      .button-container {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 8px;\r\n      margin-top: 16px;\r\n    }\r\n    \r\n    .broadcast-toggle {\r\n      margin: 16px 0;\r\n      padding: 12px;\r\n      background-color: #f5f5f5;\r\n      border-radius: 4px;\r\n    }\r\n    \r\n    mat-dialog-content {\r\n      min-width: 500px;\r\n      max-width: 600px;\r\n    }\r\n  `]\r\n})\r\nexport class NotificationFormComponent {\r\n  notificationForm: FormGroup;\r\n  editMode = false;\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private notificationService: NotificationService,\r\n    private snackBar: MatSnackBar,\r\n    private dialogRef: MatDialogRef<NotificationFormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { notification?: Notification }\r\n  ) {\r\n    this.editMode = !!data?.notification;\r\n    this.notificationForm = this.createForm();\r\n    \r\n    if (this.editMode && data.notification) {\r\n      this.populateForm(data.notification);\r\n    }\r\n  }\r\n  private createForm(): FormGroup {\r\n    return this.fb.group({\r\n      isBroadcast: [false],\r\n      loginId: [''],\r\n      title: ['', [Validators.required, Validators.minLength(3)]],\r\n      message: ['', [Validators.required, Validators.minLength(10)]],\r\n      notificationType: ['push', Validators.required],\r\n      startDate: [''],\r\n      expiryDate: [''],\r\n      isRead: [false]\r\n    });\r\n  }\r\n\r\n  onBroadcastChange(): void {\r\n    const isBroadcast = this.notificationForm.get('isBroadcast')?.value;\r\n    const loginIdControl = this.notificationForm.get('loginId');\r\n    \r\n    if (isBroadcast) {\r\n      // Clear and disable loginId for broadcast notifications\r\n      loginIdControl?.setValue('');\r\n      loginIdControl?.clearValidators();\r\n    } else {\r\n      // Re-enable loginId validation for specific user notifications\r\n      loginIdControl?.setValidators([Validators.required, Validators.min(1)]);\r\n    }\r\n    loginIdControl?.updateValueAndValidity();\r\n  }\r\n  private populateForm(notification: Notification): void {\r\n    this.notificationForm.patchValue({\r\n      isBroadcast: notification.isBroadcast || false,\r\n      loginId: notification.loginId,\r\n      title: notification.title,\r\n      message: notification.message,\r\n      notificationType: notification.notificationType || 'push',\r\n      startDate: notification.startDate ? new Date(notification.startDate) : '',\r\n      expiryDate: notification.expiryDate ? new Date(notification.expiryDate) : '',\r\n      isRead: notification.isRead || false\r\n    });\r\n    \r\n    // Trigger broadcast change logic after populating form\r\n    this.onBroadcastChange();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.notificationForm.valid && !this.isLoading) {\r\n      this.isLoading = true;\r\n      const formValue = this.notificationForm.value;\r\n        const notificationData: Notification = {\r\n        isBroadcast: formValue.isBroadcast,\r\n        loginId: formValue.isBroadcast ? undefined : formValue.loginId,\r\n        title: formValue.title,\r\n        message: formValue.message,\r\n        notificationType: formValue.notificationType,\r\n        startDate: formValue.startDate ? formValue.startDate.toISOString().split('T')[0] : undefined,\r\n        expiryDate: formValue.expiryDate ? formValue.expiryDate.toISOString().split('T')[0] : undefined,\r\n        isRead: formValue.isRead\r\n      };\r\n\r\n      if (this.editMode && this.data.notification) {\r\n        notificationData.notificationId = this.data.notification.notificationId;\r\n        this.updateNotification(notificationData);\r\n      } else {\r\n        this.createNotification(notificationData);\r\n      }\r\n    }\r\n  }\r\n  private createNotification(notification: Notification): void {\r\n    this.notificationService.createNotification(notification).subscribe({\r\n      next: (result) => {\r\n        this.snackBar.open('Notification created successfully', 'Close', { duration: 3000 });\r\n        this.dialogRef.close(result);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error creating notification:', error);\r\n        this.snackBar.open('Error creating notification', 'Close', { duration: 3000 });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateNotification(notification: Notification): void {\r\n    this.notificationService.updateNotification(notification.notificationId!, notification).subscribe({\r\n      next: (result) => {\r\n        this.snackBar.open('Notification updated successfully', 'Close', { duration: 3000 });\r\n        this.dialogRef.close(result);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error updating notification:', error);\r\n        this.snackBar.open('Error updating notification', 'Close', { duration: 3000 });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { NotificationService, Notification } from '../../services/notification.service';\r\nimport { NotificationFormComponent } from './notification-form.component';\r\n\r\n@Component({\r\n  selector: 'app-notifications-page',\r\n  standalone: true,  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatCardModule,\r\n    MatTooltipModule,\r\n    MatProgressSpinnerModule\r\n  ],\r\n  template: `\r\n    <div class=\"container\">\r\n      <mat-card>        <mat-card-header>\r\n          <mat-card-title>\r\n            <div class=\"header-content\">\r\n              <h2>Manage Notifications</h2>\r\n              <div class=\"header-actions\">\r\n                <button mat-icon-button color=\"primary\" (click)=\"loadNotifications()\" \r\n                        matTooltip=\"Refresh notifications\">\r\n                  <mat-icon>refresh</mat-icon>\r\n                </button>\r\n                <button mat-raised-button color=\"primary\" (click)=\"openNotificationForm()\">\r\n                  <mat-icon>add</mat-icon>\r\n                  Add New Notification\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </mat-card-title>\r\n        </mat-card-header>        <mat-card-content>\r\n          <div class=\"table-container\" *ngIf=\"!isLoading\">\r\n            <table mat-table [dataSource]=\"notifications\" class=\"mat-elevation-z2\">              <ng-container matColumnDef=\"loginId\">\r\n                <th mat-header-cell *matHeaderCellDef> Login ID </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  <span *ngIf=\"!notification.isBroadcast\">{{ notification.loginId }}</span>\r\n                  <span *ngIf=\"notification.isBroadcast\" class=\"broadcast-indicator\">All Users</span>\r\n                </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"isBroadcast\">\r\n                <th mat-header-cell *matHeaderCellDef> Broadcast </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  <span class=\"broadcast-badge\" [class.is-broadcast]=\"notification.isBroadcast\" \r\n                        [class.not-broadcast]=\"!notification.isBroadcast\">\r\n                    {{ notification.isBroadcast ? 'Yes' : 'No' }}\r\n                  </span>\r\n                </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"title\">\r\n                <th mat-header-cell *matHeaderCellDef> Title </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> {{ notification.title }} </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"message\">\r\n                <th mat-header-cell *matHeaderCellDef> Message </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  <span [matTooltip]=\"notification.message\" class=\"message-preview\">\r\n                    {{ notification.message | slice:0:50 }}{{ notification.message.length > 50 ? '...' : '' }}\r\n                  </span>\r\n                </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"notificationType\">\r\n                <th mat-header-cell *matHeaderCellDef> Type </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  <span class=\"type-badge\" [class.type-push]=\"notification.notificationType === 'push'\" \r\n                        [class.type-email]=\"notification.notificationType === 'email'\">\r\n                    {{ notification.notificationType || 'push' }}\r\n                  </span>\r\n                </td>\r\n              </ng-container>              <ng-container matColumnDef=\"startDate\">\r\n                <th mat-header-cell *matHeaderCellDef> Start Date </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  {{ notification.startDate ? (notification.startDate | date:'short') : 'Immediate' }}\r\n                </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"expiryDate\">\r\n                <th mat-header-cell *matHeaderCellDef> Expiry Date </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  {{ notification.expiryDate ? (notification.expiryDate | date:'short') : 'No expiry' }}\r\n                </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"isRead\">\r\n                <th mat-header-cell *matHeaderCellDef> Status </th>\r\n                <td mat-cell *matCellDef=\"let notification\"> \r\n                  <span class=\"status-badge\" [class.read]=\"notification.isRead\" [class.unread]=\"!notification.isRead\">\r\n                    {{ notification.isRead ? 'Read' : 'Unread' }}\r\n                  </span>\r\n                </td>\r\n              </ng-container>\r\n\r\n              <ng-container matColumnDef=\"actions\">\r\n                <th mat-header-cell *matHeaderCellDef> Actions </th>\r\n                <td mat-cell *matCellDef=\"let notification\">\r\n                  <button mat-icon-button color=\"primary\" (click)=\"openNotificationForm(notification)\" \r\n                          matTooltip=\"Edit notification\">\r\n                    <mat-icon>edit</mat-icon>\r\n                  </button>\r\n                  <button mat-icon-button color=\"warn\" (click)=\"deleteNotification(notification)\" \r\n                          matTooltip=\"Delete notification\">\r\n                    <mat-icon>delete</mat-icon>\r\n                  </button>\r\n                </td>\r\n              </ng-container>              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n\r\n            <div *ngIf=\"notifications.length === 0\" class=\"no-data\">\r\n              <mat-icon>notifications_off</mat-icon>\r\n              <p>No notifications found.</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"loading-container\" *ngIf=\"isLoading\">\r\n            <mat-spinner diameter=\"50\"></mat-spinner>\r\n            <p>Loading notifications...</p>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .container {\r\n      padding: 20px;\r\n      max-width: 1400px;\r\n      margin: 0 auto;\r\n    }    .header-content {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      width: 100%;\r\n    }\r\n\r\n    .header-content h2 {\r\n      margin: 0;\r\n      color: #333;\r\n    }\r\n\r\n    .header-actions {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 12px;\r\n    }\r\n\r\n    .table-container {\r\n      overflow-x: auto;\r\n      margin-top: 20px;\r\n    }\r\n\r\n    .mat-mdc-table {\r\n      width: 100%;\r\n      background: white;\r\n    }\r\n\r\n    .message-preview {\r\n      display: inline-block;\r\n      max-width: 200px;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      cursor: help;\r\n    }\r\n\r\n    .type-badge {\r\n      padding: 4px 8px;\r\n      border-radius: 12px;\r\n      font-size: 12px;\r\n      font-weight: 500;\r\n      text-transform: uppercase;\r\n    }\r\n\r\n    .type-push {\r\n      background-color: #e3f2fd;\r\n      color: #1976d2;\r\n    }\r\n\r\n    .type-email {\r\n      background-color: #f3e5f5;\r\n      color: #7b1fa2;\r\n    }\r\n\r\n    .status-badge {\r\n      padding: 4px 8px;\r\n      border-radius: 12px;\r\n      font-size: 12px;\r\n      font-weight: 500;\r\n      text-transform: uppercase;\r\n    }\r\n\r\n    .read {\r\n      background-color: #e8f5e8;\r\n      color: #2e7d32;\r\n    }    .unread {\r\n      background-color: #fff3e0;\r\n      color: #f57c00;\r\n    }\r\n\r\n    .broadcast-badge {\r\n      padding: 4px 8px;\r\n      border-radius: 12px;\r\n      font-size: 12px;\r\n      font-weight: 500;\r\n      text-transform: uppercase;\r\n    }\r\n\r\n    .is-broadcast {\r\n      background-color: #e8f5e8;\r\n      color: #2e7d32;\r\n    }\r\n\r\n    .not-broadcast {\r\n      background-color: #f5f5f5;\r\n      color: #666;\r\n    }\r\n\r\n    .broadcast-indicator {\r\n      font-weight: 500;\r\n      color: #2e7d32;\r\n      font-style: italic;\r\n    }\r\n\r\n    .mat-mdc-cell {\r\n      padding: 8px;\r\n    }    .mat-mdc-header-cell {\r\n      font-weight: 600;\r\n      color: #333;\r\n    }\r\n\r\n    .loading-container {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 40px;\r\n      color: #666;\r\n    }\r\n\r\n    .loading-container p {\r\n      margin-top: 16px;\r\n      font-size: 14px;\r\n    }\r\n\r\n    .no-data {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 40px;\r\n      color: #666;\r\n    }\r\n\r\n    .no-data mat-icon {\r\n      font-size: 48px;\r\n      height: 48px;\r\n      width: 48px;\r\n      margin-bottom: 16px;\r\n    }\r\n  `]\r\n})\r\nexport class NotificationsPageComponent implements OnInit {\r\n  notifications: Notification[] = [];\r\n  displayedColumns: string[] = ['loginId', 'isBroadcast', 'title', 'message', 'notificationType', 'startDate', 'expiryDate', 'isRead', 'actions'];\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private notificationService: NotificationService,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadNotifications();\r\n  }  loadNotifications(): void {\r\n    this.isLoading = true;\r\n    this.notificationService.getNotifications().subscribe({\r\n      next: (notifications: Notification[]) => {\r\n        this.notifications = notifications;\r\n        this.isLoading = false;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading notifications:', error);\r\n        this.snackBar.open('Error loading notifications', 'Close', { duration: 3000 });\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  openNotificationForm(notification?: Notification): void {\r\n    const dialogRef = this.dialog.open(NotificationFormComponent, {\r\n      width: '600px',\r\n      data: { notification }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.loadNotifications();\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteNotification(notification: Notification): void {\r\n    if (confirm(`Are you sure you want to delete the notification \"${notification.title}\"?`)) {\r\n      this.notificationService.deleteNotification(notification.notificationId!).subscribe({\r\n        next: () => {\r\n          this.snackBar.open('Notification deleted successfully', 'Close', { duration: 3000 });\r\n          this.loadNotifications();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error deleting notification:', error);\r\n          this.snackBar.open('Error deleting notification', 'Close', { duration: 3000 });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n", "import { Routes } from '@angular/router';\r\nimport { NotificationsPageComponent } from './notifications-page.component';\r\n\r\nexport const NOTIFICATIONS_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: NotificationsPageComponent,\r\n    title: 'Notifications'\r\n  }\r\n];\r\n"],
  "mappings": "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",
  "names": []
}

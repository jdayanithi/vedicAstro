{
  "version": 3,
  "sources": ["src/app/pages/categories/category-form.component.ts", "src/app/pages/categories/category-list.component.ts", "src/app/pages/categories/categories.routes.ts"],
  "sourcesContent": ["import { Component, Inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CategoryService, Category } from '../../services/category.service';\r\n\r\n@Component({\r\n  selector: 'app-category-form',\r\n  standalone: true,  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatIconModule\r\n  ],\r\n  template: `\r\n    <h2 mat-dialog-title>{{editMode ? 'Edit' : 'Create'}} Category</h2>\r\n    <mat-dialog-content>\r\n      <form [formGroup]=\"categoryForm\" (ngSubmit)=\"onSubmit()\">\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput formControlName=\"name\" required>\r\n          <mat-error *ngIf=\"categoryForm.get('name')?.hasError('required')\">\r\n            Name is required\r\n          </mat-error>\r\n        </mat-form-field>        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Description</mat-label>\r\n          <textarea matInput formControlName=\"description\" rows=\"3\"></textarea>\r\n        </mat-form-field>\r\n\r\n        <!-- Thumbnail Section -->\r\n        <div class=\"thumbnail-section\">\r\n          <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n            <mat-label>Thumbnail URL</mat-label>\r\n            <input matInput formControlName=\"thumbnailUrl\" placeholder=\"Enter image URL or upload file\">\r\n          </mat-form-field>\r\n          \r\n          <div class=\"file-upload-section\">\r\n            <input type=\"file\" #fileInput (change)=\"onFileSelected($event)\" \r\n                   accept=\"image/*\" style=\"display: none;\">\r\n            <button mat-stroked-button type=\"button\" (click)=\"fileInput.click()\">\r\n              <mat-icon>upload</mat-icon>\r\n              Upload Image\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Thumbnail Preview -->\r\n          <div class=\"thumbnail-preview\" *ngIf=\"categoryForm.get('thumbnailUrl')?.value\">\r\n            <img [src]=\"categoryForm.get('thumbnailUrl')?.value\" \r\n                 alt=\"Thumbnail preview\" \r\n                 (error)=\"onImageError($event)\"\r\n                 class=\"preview-image\">\r\n            <button mat-icon-button type=\"button\" (click)=\"removeThumbnail()\" \r\n                    class=\"remove-thumbnail\">\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\r\n          <mat-label>Parent Category</mat-label>\r\n          <mat-select formControlName=\"parentCategoryId\">\r\n            <mat-option [value]=\"null\">None</mat-option>\r\n            <mat-option *ngFor=\"let category of availableParentCategories\" \r\n                      [value]=\"category.categoryId\">\r\n              {{category.name}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <div class=\"button-container\">\r\n          <button mat-button type=\"button\" mat-dialog-close>Cancel</button>\r\n          <button mat-raised-button color=\"primary\" type=\"submit\" \r\n                  [disabled]=\"categoryForm.invalid\">\r\n            {{editMode ? 'Update' : 'Create'}}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-dialog-content>\r\n  `,  styles: [`\r\n    .full-width {\r\n      width: 100%;\r\n      margin-bottom: 15px;\r\n    }\r\n    .button-container {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      gap: 8px;\r\n      margin-top: 16px;\r\n    }\r\n    .thumbnail-section {\r\n      margin: 16px 0;\r\n      padding: 16px;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      background-color: #fafafa;\r\n    }\r\n    .file-upload-section {\r\n      margin: 12px 0;\r\n    }\r\n    .thumbnail-preview {\r\n      position: relative;\r\n      display: inline-block;\r\n      margin-top: 12px;\r\n    }\r\n    .preview-image {\r\n      max-width: 200px;\r\n      max-height: 150px;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      object-fit: cover;\r\n    }\r\n    .remove-thumbnail {\r\n      position: absolute;\r\n      top: -8px;\r\n      right: -8px;\r\n      background-color: #f44336;\r\n      color: white;\r\n    }\r\n    .remove-thumbnail:hover {\r\n      background-color: #d32f2f;\r\n    }\r\n  `]\r\n})\r\nexport class CategoryFormComponent {\r\n  categoryForm: FormGroup;\r\n  editMode: boolean = false;\r\n  availableParentCategories: Category[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private categoryService: CategoryService,\r\n    private snackBar: MatSnackBar,\r\n    public dialogRef: MatDialogRef<CategoryFormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { category?: Category; categories: Category[] }\r\n  ) {\r\n    this.editMode = !!data.category;\r\n    this.availableParentCategories = data.categories.filter(c => \r\n      !this.editMode || c.categoryId !== data.category?.categoryId\r\n    );    this.categoryForm = this.fb.group({\r\n      name: [data.category?.name || '', Validators.required],\r\n      description: [data.category?.description || ''],\r\n      thumbnailUrl: [data.category?.thumbnailUrl || ''],\r\n      parentCategoryId: [data.category?.parentCategoryId || null]\r\n    });\r\n  }\r\n\r\n  onFileSelected(event: any): void {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      // For demo purposes, we'll create a data URL\r\n      // In production, you would upload this to a file server\r\n      const reader = new FileReader();\r\n      reader.onload = (e: any) => {\r\n        this.categoryForm.patchValue({\r\n          thumbnailUrl: e.target.result\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  onImageError(event: any): void {\r\n    console.error('Image failed to load:', event);\r\n    this.snackBar.open('Failed to load image. Please check the URL.', 'Close', {\r\n      duration: 3000\r\n    });\r\n  }\r\n\r\n  removeThumbnail(): void {\r\n    this.categoryForm.patchValue({\r\n      thumbnailUrl: ''\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.categoryForm.valid) {\r\n      const categoryData = this.categoryForm.value;\r\n      \r\n      if (this.editMode) {\r\n        this.categoryService.updateCategory(this.data.category!.categoryId!, categoryData)\r\n          .subscribe({\r\n            next: () => {\r\n              this.snackBar.open('Category updated successfully', 'Close', {\r\n                duration: 3000\r\n              });\r\n              this.dialogRef.close(true);\r\n            },\r\n            error: () => {\r\n              this.snackBar.open('Error updating category', 'Close', {\r\n                duration: 3000\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        this.categoryService.createCategory(categoryData)\r\n          .subscribe({\r\n            next: () => {\r\n              this.snackBar.open('Category created successfully', 'Close', {\r\n                duration: 3000\r\n              });\r\n              this.dialogRef.close(true);\r\n            },\r\n            error: () => {\r\n              this.snackBar.open('Error creating category', 'Close', {\r\n                duration: 3000\r\n              });\r\n            }\r\n          });\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { CategoryFormComponent } from './category-form.component';\r\nimport { CategoryService, Category } from '../../services/category.service';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-category-list',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule\r\n  ],  template: `\r\n    <div class=\"container\">\r\n      <div class=\"header\">\r\n        <h1>Categories</h1>\r\n        <button mat-raised-button color=\"primary\" (click)=\"openCategoryForm()\">\r\n          <mat-icon>add</mat-icon>\r\n          Add Category\r\n        </button>\r\n      </div>      <table mat-table [dataSource]=\"categories\" class=\"mat-elevation-z8\">\r\n        <ng-container matColumnDef=\"thumbnail\">\r\n          <th mat-header-cell *matHeaderCellDef>Thumbnail</th>\r\n          <td mat-cell *matCellDef=\"let category\">\r\n            <div class=\"thumbnail-cell\">\r\n              <img *ngIf=\"category.thumbnailUrl\" \r\n                   [src]=\"category.thumbnailUrl\" \r\n                   [alt]=\"category.name + ' thumbnail'\"\r\n                   class=\"category-thumbnail\"\r\n                   (error)=\"onImageError($event)\">\r\n              <div *ngIf=\"!category.thumbnailUrl\" class=\"no-thumbnail\">\r\n                <mat-icon>image</mat-icon>\r\n              </div>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef>Name</th>\r\n          <td mat-cell *matCellDef=\"let category\">{{category.name}}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"description\">\r\n          <th mat-header-cell *matHeaderCellDef>Description</th>\r\n          <td mat-cell *matCellDef=\"let category\">{{category.description}}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"parentCategory\">\r\n          <th mat-header-cell *matHeaderCellDef>Parent Category</th>\r\n          <td mat-cell *matCellDef=\"let category\">{{category.parentCategoryName || '-'}}</td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n          <td mat-cell *matCellDef=\"let category\">\r\n            <button mat-icon-button color=\"primary\" (click)=\"editCategory(category)\">\r\n              <mat-icon>edit</mat-icon>\r\n            </button>\r\n            <button mat-icon-button color=\"warn\" (click)=\"deleteCategory(category)\">\r\n              <mat-icon>delete</mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      </table>\r\n    </div>\r\n  `,  styles: [`\r\n    .container {\r\n      padding: 20px;\r\n    }\r\n    .header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 20px;\r\n    }\r\n    table {\r\n      width: 100%;\r\n    }\r\n    .thumbnail-cell {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 60px;\r\n      height: 60px;\r\n    }\r\n    .category-thumbnail {\r\n      width: 50px;\r\n      height: 50px;\r\n      object-fit: cover;\r\n      border-radius: 4px;\r\n      border: 1px solid #ddd;\r\n    }\r\n    .no-thumbnail {\r\n      width: 50px;\r\n      height: 50px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      background-color: #f5f5f5;\r\n      border: 1px solid #ddd;\r\n      border-radius: 4px;\r\n      color: #999;\r\n    }\r\n  `]\r\n})\r\nexport class CategoryListComponent implements OnInit {\r\n  categories: Category[] = [];\r\n  displayedColumns: string[] = ['thumbnail', 'name', 'description', 'parentCategory', 'actions'];\r\n\r\n  constructor(\r\n    private categoryService: CategoryService,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadCategories();\r\n  }\r\n\r\n  loadCategories() {\r\n    this.categoryService.getCategories().subscribe(categories => {\r\n      this.categories = categories;\r\n    });\r\n  }\r\n\r\n  openCategoryForm(category?: Category) {\r\n    const dialogRef = this.dialog.open(CategoryFormComponent, {\r\n      width: '500px',\r\n      data: { category, categories: this.categories }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.loadCategories();\r\n      }\r\n    });\r\n  }\r\n\r\n  editCategory(category: Category) {\r\n    this.openCategoryForm(category);\r\n  }\r\n\r\n  deleteCategory(category: Category) {\r\n    if (confirm('Are you sure you want to delete this category?')) {\r\n      this.categoryService.deleteCategory(category.categoryId!).subscribe({\r\n        next: () => {\r\n          this.loadCategories();\r\n          this.snackBar.open('Category deleted successfully', 'Close', {\r\n            duration: 3000\r\n          });\r\n        },\r\n        error: () => {\r\n          this.snackBar.open('Error deleting category', 'Close', {\r\n            duration: 3000\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onImageError(event: any): void {\r\n    // Replace broken image with placeholder\r\n    event.target.style.display = 'none';\r\n    const parent = event.target.parentNode;\r\n    if (parent && !parent.querySelector('.no-thumbnail')) {\r\n      const placeholder = document.createElement('div');\r\n      placeholder.className = 'no-thumbnail';\r\n      placeholder.innerHTML = '<mat-icon>broken_image</mat-icon>';\r\n      parent.appendChild(placeholder);\r\n    }\r\n  }\r\n}\r\n", "import { Routes } from '@angular/router';\r\nimport { CategoryListComponent } from './category-list.component';\r\n\r\nexport const CATEGORY_ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: CategoryListComponent\r\n  }\r\n];\r\n"],
  "mappings": "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",
  "names": []
}

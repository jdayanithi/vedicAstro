{
  "version": 3,
  "sources": ["src/app/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable, PLATFORM_ID, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from '../../environments/environment';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  username: string;\r\n  role: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  birthDate: string;\r\n  birthTime: string;\r\n  birthPlace: string;\r\n  profilePicture: string;\r\n  bio: string;\r\n  userType: string;\r\n  zodiacSign: string;\r\n  risingSign: string;\r\n  moonSign: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  phoneNumber: string;\r\n  password: string;\r\n  birthDate: string;\r\n  birthTime: string;\r\n  birthPlace: string;\r\n  bio: string;\r\n  userType: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = new BehaviorSubject<boolean>(false);\r\n  private currentUserRole = new BehaviorSubject<string | null>(null);\r\n  private currentUser = new BehaviorSubject<LoginResponse | null>(null);\r\n  private platformId = inject(PLATFORM_ID);\r\n  private tokenExpirationTimer: any;\r\n\r\n  isLoggedIn$ = this.isAuthenticated.asObservable();\r\n  userRole$ = this.currentUserRole.asObservable();\r\n  currentUser$ = this.currentUser.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    this.checkSession();\r\n  }\r\n\r\n  private checkSession(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      const token = localStorage.getItem('token');\r\n      const session = this.getSession();\r\n      \r\n      if (token && session) {\r\n        this.isAuthenticated.next(true);\r\n        this.currentUserRole.next(session.role);\r\n        this.currentUser.next(session);\r\n        \r\n        // Check token expiration\r\n        try {\r\n          const tokenData = JSON.parse(atob(token.split('.')[1]));\r\n          const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\r\n          const now = Date.now();\r\n          \r\n          if (expirationTime > now) {\r\n            // Set timer for auto logout\r\n            this.autoLogoutTimer(expirationTime - now);\r\n          } else {\r\n            this.logout();\r\n          }\r\n        } catch (e) {\r\n          this.logout();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private autoLogoutTimer(duration: number) {\r\n    if (this.tokenExpirationTimer) {\r\n      clearTimeout(this.tokenExpirationTimer);\r\n    }\r\n    this.tokenExpirationTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, duration);\r\n  }\r\n\r\n  private getSession(): LoginResponse | null {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      const sessionData = localStorage.getItem('session');\r\n      return sessionData ? JSON.parse(sessionData) : null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getCurrentUser(): LoginResponse | null {\r\n    return this.getSession();\r\n  }\r\n\r\n  login(email: string, password: string): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${environment.apiUrl}/login/validate`, { username: email, password })\r\n      .pipe(\r\n        tap(response => {\r\n          if (isPlatformBrowser(this.platformId)) {\r\n            localStorage.setItem('token', response.token);\r\n            localStorage.setItem('session', JSON.stringify(response));\r\n            \r\n            // Set auto logout timer\r\n            try {\r\n              const tokenData = JSON.parse(atob(response.token.split('.')[1]));\r\n              const expirationTime = tokenData.exp * 1000;\r\n              this.autoLogoutTimer(expirationTime - Date.now());\r\n            } catch (e) {\r\n              console.error('Error setting auto logout timer:', e);\r\n            }\r\n          }\r\n          this.isAuthenticated.next(true);\r\n          this.currentUserRole.next(response.role);\r\n          this.currentUser.next(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  register(data: RegisterRequest): Observable<any> {\r\n    return this.http.post(`${environment.apiUrl}/register`, data);\r\n  }\r\n\r\n  logout(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('session');\r\n      if (this.tokenExpirationTimer) {\r\n        clearTimeout(this.tokenExpirationTimer);\r\n        this.tokenExpirationTimer = null;\r\n      }\r\n    }\r\n    this.isAuthenticated.next(false);\r\n    this.currentUserRole.next(null);\r\n    this.currentUser.next(null);\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return isPlatformBrowser(this.platformId) ? localStorage.getItem('token') : null;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

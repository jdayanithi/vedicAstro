{"version":3,"sources":["node_modules/@angular/material/fesm2022/progress-bar.mjs","node_modules/@angular/material/fesm2022/grid-list.mjs","src/app/services/dashboard.service.ts","src/app/pages/dashboard/dashboard.component.ts","src/app/pages/dashboard/dashboard.routes.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, ANIMATION_MODULE_TYPE, numberAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Injection token to be used to override the default options for `mat-progress-bar`. */\nfunction MatProgressBar_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 2);\n  }\n}\nconst MAT_PROGRESS_BAR_DEFAULT_OPTIONS = new InjectionToken('MAT_PROGRESS_BAR_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? _location.pathname + _location.search : ''\n  };\n}\nclass MatProgressBar {\n  constructor(_elementRef, _ngZone, _changeDetectorRef, _animationMode, defaults) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /** Flag that indicates whether NoopAnimations mode is set to true. */\n    this._isNoopAnimation = false;\n    this._defaultColor = 'primary';\n    this._value = 0;\n    this._bufferValue = 0;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n    this.animationEnd = new EventEmitter();\n    this._mode = 'determinate';\n    /** Event handler for `transitionend` events. */\n    this._transitionendHandler = event => {\n      if (this.animationEnd.observers.length === 0 || !event.target || !event.target.classList.contains('mdc-linear-progress__primary-bar')) {\n        return;\n      }\n      if (this.mode === 'determinate' || this.mode === 'buffer') {\n        this._ngZone.run(() => this.animationEnd.next({\n          value: this.value\n        }));\n      }\n    };\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this._defaultColor = defaults.color;\n      }\n      this.mode = defaults.mode || this.mode;\n    }\n  }\n  // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n  /**\n   * Theme color of the progress bar. This API is supported in M2 themes only, it\n   * has no effect in M3 themes.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/theming#using-component-color-variants.\n   */\n  get color() {\n    return this._color || this._defaultColor;\n  }\n  set color(value) {\n    this._color = value;\n  }\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  get value() {\n    return this._value;\n  }\n  set value(v) {\n    this._value = clamp(v || 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Buffer value of the progress bar. Defaults to zero. */\n  get bufferValue() {\n    return this._bufferValue || 0;\n  }\n  set bufferValue(v) {\n    this._bufferValue = clamp(v || 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  get mode() {\n    return this._mode;\n  }\n  set mode(value) {\n    // Note that we don't technically need a getter and a setter here,\n    // but we use it to match the behavior of the existing mat-progress-bar.\n    this._mode = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  ngAfterViewInit() {\n    // Run outside angular so change detection didn't get triggered on every transition end\n    // instead only on the animation that we care about (primary value bar's transitionend)\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('transitionend', this._transitionendHandler);\n    });\n  }\n  ngOnDestroy() {\n    this._elementRef.nativeElement.removeEventListener('transitionend', this._transitionendHandler);\n  }\n  /** Gets the transform style that should be applied to the primary bar. */\n  _getPrimaryBarTransform() {\n    return `scaleX(${this._isIndeterminate() ? 1 : this.value / 100})`;\n  }\n  /** Gets the `flex-basis` value that should be applied to the buffer bar. */\n  _getBufferBarFlexBasis() {\n    return `${this.mode === 'buffer' ? this.bufferValue : 100}%`;\n  }\n  /** Returns whether the progress bar is indeterminate. */\n  _isIndeterminate() {\n    return this.mode === 'indeterminate' || this.mode === 'query';\n  }\n  static {\n    this.ɵfac = function MatProgressBar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatProgressBar)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_DEFAULT_OPTIONS, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatProgressBar,\n      selectors: [[\"mat-progress-bar\"]],\n      hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"tabindex\", \"-1\", 1, \"mat-mdc-progress-bar\", \"mdc-linear-progress\"],\n      hostVars: 10,\n      hostBindings: function MatProgressBar_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"aria-valuenow\", ctx._isIndeterminate() ? null : ctx.value)(\"mode\", ctx.mode);\n          i0.ɵɵclassMap(\"mat-\" + ctx.color);\n          i0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation)(\"mdc-linear-progress--animation-ready\", !ctx._isNoopAnimation)(\"mdc-linear-progress--indeterminate\", ctx._isIndeterminate());\n        }\n      },\n      inputs: {\n        color: \"color\",\n        value: [2, \"value\", \"value\", numberAttribute],\n        bufferValue: [2, \"bufferValue\", \"bufferValue\", numberAttribute],\n        mode: \"mode\"\n      },\n      outputs: {\n        animationEnd: \"animationEnd\"\n      },\n      exportAs: [\"matProgressBar\"],\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n      decls: 7,\n      vars: 5,\n      consts: [[\"aria-hidden\", \"true\", 1, \"mdc-linear-progress__buffer\"], [1, \"mdc-linear-progress__buffer-bar\"], [1, \"mdc-linear-progress__buffer-dots\"], [\"aria-hidden\", \"true\", 1, \"mdc-linear-progress__bar\", \"mdc-linear-progress__primary-bar\"], [1, \"mdc-linear-progress__bar-inner\"], [\"aria-hidden\", \"true\", 1, \"mdc-linear-progress__bar\", \"mdc-linear-progress__secondary-bar\"]],\n      template: function MatProgressBar_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"div\", 1);\n          i0.ɵɵtemplate(2, MatProgressBar_Conditional_2_Template, 1, 0, \"div\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 3);\n          i0.ɵɵelement(4, \"span\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 5);\n          i0.ɵɵelement(6, \"span\", 4);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵstyleProp(\"flex-basis\", ctx._getBufferBarFlexBasis());\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.mode === \"buffer\" ? 2 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵstyleProp(\"transform\", ctx._getPrimaryBarTransform());\n        }\n      },\n      styles: [\".mat-mdc-progress-bar{display:block;text-align:start}.mat-mdc-progress-bar[mode=query]{transform:scaleX(-1)}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-dots,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__secondary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__bar-inner.mdc-linear-progress__bar-inner{animation:none}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-bar{transition:transform 1ms}.mdc-linear-progress{position:relative;width:100%;transform:translateZ(0);outline:1px solid rgba(0,0,0,0);overflow-x:hidden;transition:opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);height:max(var(--mdc-linear-progress-track-height),var(--mdc-linear-progress-active-indicator-height))}.cdk-high-contrast-active .mdc-linear-progress{outline-color:CanvasText}.mdc-linear-progress__bar{position:absolute;top:0;bottom:0;margin:auto 0;width:100%;animation:none;transform-origin:top left;transition:transform 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);height:var(--mdc-linear-progress-active-indicator-height)}.mdc-linear-progress--indeterminate .mdc-linear-progress__bar{transition:none}[dir=rtl] .mdc-linear-progress__bar{right:0;transform-origin:center right}.mdc-linear-progress__bar-inner{display:inline-block;position:absolute;width:100%;animation:none;border-top-style:solid;border-color:var(--mdc-linear-progress-active-indicator-color, var(--mat-app-primary));border-top-width:var(--mdc-linear-progress-active-indicator-height)}.mdc-linear-progress__buffer{display:flex;position:absolute;top:0;bottom:0;margin:auto 0;width:100%;overflow:hidden;height:var(--mdc-linear-progress-track-height);border-radius:var(--mdc-linear-progress-track-shape, var(--mat-app-corner-none))}.mdc-linear-progress__buffer-dots{-webkit-mask-image:url(\\\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E\\\");mask-image:url(\\\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E\\\");background-repeat:repeat-x;flex:auto;transform:rotate(180deg);animation:mdc-linear-progress-buffering 250ms infinite linear;background-color:var(--mdc-linear-progress-track-color, var(--mat-app-surface-variant))}.cdk-high-contrast-active .mdc-linear-progress__buffer-dots{background-color:ButtonBorder}[dir=rtl] .mdc-linear-progress__buffer-dots{animation:mdc-linear-progress-buffering-reverse 250ms infinite linear;transform:rotate(0)}.mdc-linear-progress__buffer-bar{flex:0 1 100%;transition:flex-basis 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);background-color:var(--mdc-linear-progress-track-color, var(--mat-app-surface-variant))}.mdc-linear-progress__primary-bar{transform:scaleX(0)}.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{left:-145.166611%}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation:mdc-linear-progress-primary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-primary-indeterminate-scale 2s infinite linear}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation-name:mdc-linear-progress-primary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{right:-145.166611%;left:auto}.mdc-linear-progress__secondary-bar{display:none}.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{left:-54.888891%;display:block}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation:mdc-linear-progress-secondary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-secondary-indeterminate-scale 2s infinite linear}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation-name:mdc-linear-progress-secondary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{right:-54.888891%;left:auto}@keyframes mdc-linear-progress-buffering{from{transform:rotate(180deg) translateX(calc(var(--mdc-linear-progress-track-height) * -2.5))}}@keyframes mdc-linear-progress-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mdc-linear-progress-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mdc-linear-progress-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.205028, 0.057051, 0.57661, 0.453971);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.152313, 0.196432, 0.648374, 1.004315);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.257759, -0.003163, 0.211762, 1.38179);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-primary-indeterminate-translate-reverse{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(-83.67142%)}100%{transform:translateX(-200.611057%)}}@keyframes mdc-linear-progress-secondary-indeterminate-translate-reverse{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(-37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(-84.386165%)}100%{transform:translateX(-160.277782%)}}@keyframes mdc-linear-progress-buffering-reverse{from{transform:translateX(-10px)}}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatProgressBar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-bar',\n      exportAs: 'matProgressBar',\n      host: {\n        'role': 'progressbar',\n        'aria-valuemin': '0',\n        'aria-valuemax': '100',\n        // set tab index to -1 so screen readers will read the aria-label\n        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n        'tabindex': '-1',\n        '[attr.aria-valuenow]': '_isIndeterminate() ? null : value',\n        '[attr.mode]': 'mode',\n        'class': 'mat-mdc-progress-bar mdc-linear-progress',\n        '[class]': '\"mat-\" + color',\n        '[class._mat-animation-noopable]': '_isNoopAnimation',\n        '[class.mdc-linear-progress--animation-ready]': '!_isNoopAnimation',\n        '[class.mdc-linear-progress--indeterminate]': '_isIndeterminate()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      template: \"<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div class=\\\"mdc-linear-progress__buffer\\\" aria-hidden=\\\"true\\\">\\n  <div\\n    class=\\\"mdc-linear-progress__buffer-bar\\\"\\n    [style.flex-basis]=\\\"_getBufferBarFlexBasis()\\\"></div>\\n  <!-- Remove the dots outside of buffer mode since they can cause CSP issues (see #28938) -->\\n  @if (mode === 'buffer') {\\n    <div class=\\\"mdc-linear-progress__buffer-dots\\\"></div>\\n  }\\n</div>\\n<div\\n  class=\\\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\\\"\\n  aria-hidden=\\\"true\\\"\\n  [style.transform]=\\\"_getPrimaryBarTransform()\\\">\\n  <span class=\\\"mdc-linear-progress__bar-inner\\\"></span>\\n</div>\\n<div class=\\\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\\\" aria-hidden=\\\"true\\\">\\n  <span class=\\\"mdc-linear-progress__bar-inner\\\"></span>\\n</div>\\n\",\n      styles: [\".mat-mdc-progress-bar{display:block;text-align:start}.mat-mdc-progress-bar[mode=query]{transform:scaleX(-1)}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-dots,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__secondary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__bar-inner.mdc-linear-progress__bar-inner{animation:none}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-bar{transition:transform 1ms}.mdc-linear-progress{position:relative;width:100%;transform:translateZ(0);outline:1px solid rgba(0,0,0,0);overflow-x:hidden;transition:opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);height:max(var(--mdc-linear-progress-track-height),var(--mdc-linear-progress-active-indicator-height))}.cdk-high-contrast-active .mdc-linear-progress{outline-color:CanvasText}.mdc-linear-progress__bar{position:absolute;top:0;bottom:0;margin:auto 0;width:100%;animation:none;transform-origin:top left;transition:transform 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);height:var(--mdc-linear-progress-active-indicator-height)}.mdc-linear-progress--indeterminate .mdc-linear-progress__bar{transition:none}[dir=rtl] .mdc-linear-progress__bar{right:0;transform-origin:center right}.mdc-linear-progress__bar-inner{display:inline-block;position:absolute;width:100%;animation:none;border-top-style:solid;border-color:var(--mdc-linear-progress-active-indicator-color, var(--mat-app-primary));border-top-width:var(--mdc-linear-progress-active-indicator-height)}.mdc-linear-progress__buffer{display:flex;position:absolute;top:0;bottom:0;margin:auto 0;width:100%;overflow:hidden;height:var(--mdc-linear-progress-track-height);border-radius:var(--mdc-linear-progress-track-shape, var(--mat-app-corner-none))}.mdc-linear-progress__buffer-dots{-webkit-mask-image:url(\\\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E\\\");mask-image:url(\\\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='xMinYMin slice'%3E%3Ccircle cx='1' cy='1' r='1'/%3E%3C/svg%3E\\\");background-repeat:repeat-x;flex:auto;transform:rotate(180deg);animation:mdc-linear-progress-buffering 250ms infinite linear;background-color:var(--mdc-linear-progress-track-color, var(--mat-app-surface-variant))}.cdk-high-contrast-active .mdc-linear-progress__buffer-dots{background-color:ButtonBorder}[dir=rtl] .mdc-linear-progress__buffer-dots{animation:mdc-linear-progress-buffering-reverse 250ms infinite linear;transform:rotate(0)}.mdc-linear-progress__buffer-bar{flex:0 1 100%;transition:flex-basis 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1);background-color:var(--mdc-linear-progress-track-color, var(--mat-app-surface-variant))}.mdc-linear-progress__primary-bar{transform:scaleX(0)}.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{left:-145.166611%}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation:mdc-linear-progress-primary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-primary-indeterminate-scale 2s infinite linear}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation-name:mdc-linear-progress-primary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{right:-145.166611%;left:auto}.mdc-linear-progress__secondary-bar{display:none}.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{left:-54.888891%;display:block}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation:mdc-linear-progress-secondary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-secondary-indeterminate-scale 2s infinite linear}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation-name:mdc-linear-progress-secondary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{right:-54.888891%;left:auto}@keyframes mdc-linear-progress-buffering{from{transform:rotate(180deg) translateX(calc(var(--mdc-linear-progress-track-height) * -2.5))}}@keyframes mdc-linear-progress-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mdc-linear-progress-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mdc-linear-progress-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.205028, 0.057051, 0.57661, 0.453971);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.152313, 0.196432, 0.648374, 1.004315);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.257759, -0.003163, 0.211762, 1.38179);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-primary-indeterminate-translate-reverse{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(-83.67142%)}100%{transform:translateX(-200.611057%)}}@keyframes mdc-linear-progress-secondary-indeterminate-translate-reverse{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(-37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(-84.386165%)}100%{transform:translateX(-160.277782%)}}@keyframes mdc-linear-progress-buffering-reverse{from{transform:translateX(-10px)}}\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_PROGRESS_BAR_DEFAULT_OPTIONS]\n    }]\n  }], {\n    color: [{\n      type: Input\n    }],\n    value: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    bufferValue: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    animationEnd: [{\n      type: Output\n    }],\n    mode: [{\n      type: Input\n    }]\n  });\n})();\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\nclass MatProgressBarModule {\n  static {\n    this.ɵfac = function MatProgressBarModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatProgressBarModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatProgressBarModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatProgressBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatProgressBar],\n      exports: [MatProgressBar, MatCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_DEFAULT_OPTIONS, MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\";\nclass TileCoordinator {\n  constructor() {\n    /** Index at which the search for the next gap will start. */\n    this.columnIndex = 0;\n    /** The current row index. */\n    this.rowIndex = 0;\n  }\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /** Calculates the row and col position of a tile. */\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /** Finds the next available space large enough to fit the tile. */\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    }\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n  /** Move \"down\" to the next row. */\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++;\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n  /** Update the tile tracker to account for the given tile in the given space. */\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n}\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\nclass MatGridTile {\n  constructor(_element, _gridList) {\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /** Amount of rows that the grid tile takes up. */\n  get rowspan() {\n    return this._rowspan;\n  }\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /** Amount of columns that the grid tile takes up. */\n  get colspan() {\n    return this._colspan;\n  }\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n  static {\n    this.ɵfac = function MatGridTile_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTile)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatGridTile,\n      selectors: [[\"mat-grid-tile\"]],\n      hostAttrs: [1, \"mat-grid-tile\"],\n      hostVars: 2,\n      hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n        }\n      },\n      inputs: {\n        rowspan: \"rowspan\",\n        colspan: \"colspan\"\n      },\n      exportAs: [\"matGridTile\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 2,\n      vars: 0,\n      consts: [[1, \"mat-grid-tile-content\"]],\n      template: function MatGridTile_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_GRID_LIST]\n    }]\n  }], {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridTileText {\n  constructor(_element) {\n    this._element = _element;\n  }\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n  static {\n    this.ɵfac = function MatGridTileText_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTileText)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatGridTileText,\n      selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n      contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c2,\n      decls: 4,\n      vars: 0,\n      consts: [[1, \"mat-grid-list-text\"]],\n      template: function MatGridTileText_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c1);\n          i0.ɵɵprojection(0);\n          i0.ɵɵelementStart(1, \"div\", 0);\n          i0.ɵɵprojection(2, 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵprojection(3, 2);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n  static {\n    this.ɵfac = function MatGridAvatarCssMatStyler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridAvatarCssMatStyler)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatGridAvatarCssMatStyler,\n      selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n      hostAttrs: [1, \"mat-grid-avatar\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n  static {\n    this.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTileHeaderCssMatStyler)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatGridTileHeaderCssMatStyler,\n      selectors: [[\"mat-grid-tile-header\"]],\n      hostAttrs: [1, \"mat-grid-tile-header\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n  static {\n    this.ɵfac = function MatGridTileFooterCssMatStyler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTileFooterCssMatStyler)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatGridTileFooterCssMatStyler,\n      selectors: [[\"mat-grid-tile-footer\"]],\n      hostAttrs: [1, \"mat-grid-tile-footer\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight() {\n    return null;\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['height', null]);\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n  constructor(value) {\n    super();\n    this._parseRatio(value);\n  }\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  _parseRatio(value) {\n    const ratioParts = value.split(':');\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    this._gutter = '1px';\n  }\n  /** Amount of columns in the grid list. */\n  get cols() {\n    return this._cols;\n  }\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /** Size of the grid list's gutter in pixels. */\n  get gutterSize() {\n    return this._gutter;\n  }\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /** Set internal representation of row height from the user-provided value. */\n  get rowHeight() {\n    return this._rowHeight;\n  }\n  set rowHeight(value) {\n    const newValue = `${value == null ? '' : value}`;\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /** Throw a friendly error if cols property is missing */\n  _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /** Default to equal width:height if rowHeight property is missing */\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /** Computes and applies the size and position for all children grid tiles. */\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n  static {\n    this.ɵfac = function MatGridList_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Directionality, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatGridList,\n      selectors: [[\"mat-grid-list\"]],\n      contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tiles = _t);\n        }\n      },\n      hostAttrs: [1, \"mat-grid-list\"],\n      hostVars: 1,\n      hostBindings: function MatGridList_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"cols\", ctx.cols);\n        }\n      },\n      inputs: {\n        cols: \"cols\",\n        gutterSize: \"gutterSize\",\n        rowHeight: \"rowHeight\"\n      },\n      exportAs: [\"matGridList\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }]), i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 2,\n      vars: 0,\n      template: function MatGridList_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\");\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [_c3],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size, var(--mat-app-body-large))}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size, var(--mat-app-body-medium))}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }],\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridListModule {\n  static {\n    this.ɵfac = function MatGridListModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridListModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatGridListModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule, MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface DashboardStats {\r\n  totalCourses: number;\r\n  publishedCourses: number;\r\n  unpublishedCourses: number;\r\n  totalPayments: number;\r\n  totalPaymentAmount: number;\r\n  totalUsers: number;\r\n  totalTags: number;\r\n  totalCategories: number;\r\n  totalTopics: number;\r\n  totalLessons: number;\r\n  totalNotifications: number;\r\n}\r\n\r\nexport interface ChartData {\r\n  name: string;\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\nexport interface UserJoiningData {\r\n  date: string;\r\n  count: number;\r\n}\r\n\r\nexport interface PaymentTrendData {\r\n  month: string;\r\n  amount: number;\r\n  count: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n  private apiUrl = `${environment.apiUrl}/dashboard`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getDashboardStats(): Observable<DashboardStats> {\r\n    return this.http.get<DashboardStats>(`${this.apiUrl}/stats`);\r\n  }\r\n\r\n  getCourseStatusChart(): Observable<ChartData[]> {\r\n    return this.http.get<ChartData[]>(`${this.apiUrl}/course-status`);\r\n  }\r\n\r\n  getUserJoiningTrend(): Observable<UserJoiningData[]> {\r\n    return this.http.get<UserJoiningData[]>(`${this.apiUrl}/user-joining-trend`);\r\n  }\r\n\r\n  getPaymentTrend(): Observable<PaymentTrendData[]> {\r\n    return this.http.get<PaymentTrendData[]>(`${this.apiUrl}/payment-trend`);\r\n  }\r\n\r\n  getTopCategoriesChart(): Observable<ChartData[]> {\r\n    return this.http.get<ChartData[]>(`${this.apiUrl}/top-categories`);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { AuthService, LoginResponse } from '../../services/auth.service';\r\nimport { DashboardService, DashboardStats, ChartData, UserJoiningData, PaymentTrendData } from '../../services/dashboard.service';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    MatCardModule, \r\n    MatIconModule, \r\n    MatButtonModule, \r\n    MatProgressBarModule,\r\n    MatGridListModule,\r\n    MatDividerModule,\r\n    MatChipsModule\r\n  ],  template: `\r\n    <div class=\"dashboard-container\">\r\n      <!-- Header -->\r\n      <div class=\"dashboard-header\">\r\n        <h1>Admin Dashboard</h1>\r\n        <p>Welcome back, {{ sessionData?.firstName }} {{ sessionData?.lastName }}</p>\r\n        <button mat-raised-button color=\"primary\" (click)=\"refreshData()\">\r\n          <mat-icon>refresh</mat-icon>\r\n          Refresh Data\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Loading State -->\r\n      <div *ngIf=\"loading\" class=\"loading-container\">\r\n        <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n        <p>Loading dashboard data...</p>\r\n      </div>\r\n\r\n      <!-- Dashboard Content -->\r\n      <div *ngIf=\"!loading\" class=\"dashboard-content\">\r\n        \r\n        <!-- Stats Cards -->\r\n        <div class=\"stats-grid\">\r\n          <mat-card class=\"stat-card course-card\">\r\n            <mat-card-header>\r\n              <mat-icon mat-card-avatar>school</mat-icon>\r\n              <mat-card-title>Courses</mat-card-title>\r\n              <mat-card-subtitle>Total courses in system</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"stat-number\">{{ stats?.totalCourses || 0 }}</div>\r\n              <div class=\"stat-details\">\r\n                <span class=\"published\">{{ stats?.publishedCourses || 0 }} Published</span>\r\n                <span class=\"unpublished\">{{ stats?.unpublishedCourses || 0 }} Draft</span>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n          <mat-card class=\"stat-card payment-card\">\r\n            <mat-card-header>\r\n              <mat-icon mat-card-avatar>payment</mat-icon>\r\n              <mat-card-title>Payments</mat-card-title>\r\n              <mat-card-subtitle>Revenue & transactions</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"stat-number\">₹{{ formatCurrency(stats?.totalPaymentAmount || 0) }}</div>\r\n              <div class=\"stat-details\">\r\n                <span>{{ stats?.totalPayments || 0 }} Transactions</span>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n          <mat-card class=\"stat-card user-card\">\r\n            <mat-card-header>\r\n              <mat-icon mat-card-avatar>people</mat-icon>\r\n              <mat-card-title>Users</mat-card-title>\r\n              <mat-card-subtitle>Registered users</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"stat-number\">{{ stats?.totalUsers || 0 }}</div>\r\n              <div class=\"stat-details\">\r\n                <span>Active learners</span>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n          <mat-card class=\"stat-card content-card\">\r\n            <mat-card-header>\r\n              <mat-icon mat-card-avatar>library_books</mat-icon>\r\n              <mat-card-title>Content</mat-card-title>\r\n              <mat-card-subtitle>Topics & Lessons</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"stat-number\">{{ stats?.totalLessons || 0 }}</div>\r\n              <div class=\"stat-details\">\r\n                <span>{{ stats?.totalTopics || 0 }} Topics</span>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n\r\n        <!-- Secondary Stats -->\r\n        <div class=\"secondary-stats\">\r\n          <mat-card class=\"secondary-stat\">\r\n            <mat-icon>local_offer</mat-icon>\r\n            <div>\r\n              <span class=\"number\">{{ stats?.totalTags || 0 }}</span>\r\n              <span class=\"label\">Tags</span>\r\n            </div>\r\n          </mat-card>\r\n\r\n          <mat-card class=\"secondary-stat\">\r\n            <mat-icon>category</mat-icon>\r\n            <div>\r\n              <span class=\"number\">{{ stats?.totalCategories || 0 }}</span>\r\n              <span class=\"label\">Categories</span>\r\n            </div>\r\n          </mat-card>\r\n\r\n          <mat-card class=\"secondary-stat\">\r\n            <mat-icon>notifications</mat-icon>\r\n            <div>\r\n              <span class=\"number\">{{ stats?.totalNotifications || 0 }}</span>\r\n              <span class=\"label\">Notifications</span>\r\n            </div>\r\n          </mat-card>\r\n        </div>\r\n\r\n        <!-- Charts Section -->\r\n        <div class=\"charts-section\">\r\n          \r\n          <!-- Course Status Chart -->\r\n          <mat-card class=\"chart-card\">\r\n            <mat-card-header>\r\n              <mat-card-title>Course Status Distribution</mat-card-title>\r\n              <mat-card-subtitle>Published vs Unpublished courses</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"chart-container\">\r\n                <div class=\"donut-chart\" *ngIf=\"courseStatusData.length > 0\">\r\n                  <div class=\"chart-legend\">\r\n                    <div *ngFor=\"let item of courseStatusData\" class=\"legend-item\">\r\n                      <div class=\"legend-color\" [style.background-color]=\"item.color\"></div>\r\n                      <span>{{ item.name }}: {{ item.value }}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"chart-visual\">\r\n                    <div class=\"donut-segments\">\r\n                      <div *ngFor=\"let item of courseStatusData; let i = index\" \r\n                           class=\"donut-segment\"\r\n                           [style.--percentage]=\"getPercentage(item.value, getTotalCourses())\"\r\n                           [style.--color]=\"item.color\"\r\n                           [style.--rotation]=\"getRotation(i)\">\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"donut-center\">\r\n                      <div class=\"center-number\">{{ getTotalCourses() }}</div>\r\n                      <div class=\"center-label\">Total</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n          <!-- User Joining Trend -->\r\n          <mat-card class=\"chart-card\">\r\n            <mat-card-header>\r\n              <mat-card-title>User Registration Trend</mat-card-title>\r\n              <mat-card-subtitle>New users over time (Last 30 days)</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"chart-container\">\r\n                <div class=\"line-chart\" *ngIf=\"userJoiningData.length > 0\">\r\n                  <div class=\"chart-bars\">\r\n                    <div *ngFor=\"let data of userJoiningData.slice(-15)\" \r\n                         class=\"bar-item\">\r\n                      <div class=\"bar\" \r\n                           [style.height.%]=\"getBarHeight(data.count, getMaxUserJoining())\">\r\n                      </div>\r\n                      <div class=\"bar-label\">{{ formatDate(data.date) }}</div>\r\n                      <div class=\"bar-value\">{{ data.count }}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"userJoiningData.length === 0\" class=\"no-data\">\r\n                  <mat-icon>trending_up</mat-icon>\r\n                  <p>No user registration data available</p>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n          <!-- Payment Trend -->\r\n          <mat-card class=\"chart-card\">\r\n            <mat-card-header>\r\n              <mat-card-title>Revenue Trend</mat-card-title>\r\n              <mat-card-subtitle>Monthly payment collection</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"chart-container\">\r\n                <div class=\"payment-chart\" *ngIf=\"paymentTrendData.length > 0\">\r\n                  <div class=\"chart-bars\">\r\n                    <div *ngFor=\"let data of paymentTrendData.slice(-8)\" \r\n                         class=\"payment-bar-item\">\r\n                      <div class=\"payment-bar\" \r\n                           [style.height.%]=\"getBarHeight(data.amount, getMaxPaymentAmount())\">\r\n                      </div>\r\n                      <div class=\"bar-label\">{{ data.month }}</div>\r\n                      <div class=\"bar-value\">₹{{ formatCurrency(data.amount) }}</div>\r\n                      <div class=\"bar-count\">{{ data.count }} payments</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"paymentTrendData.length === 0\" class=\"no-data\">\r\n                  <mat-icon>payment</mat-icon>\r\n                  <p>No payment data available</p>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n          <!-- Top Categories -->\r\n          <mat-card class=\"chart-card\">\r\n            <mat-card-header>\r\n              <mat-card-title>Popular Categories</mat-card-title>\r\n              <mat-card-subtitle>Courses by category</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <div class=\"chart-container\">\r\n                <div class=\"category-list\" *ngIf=\"topCategoriesData.length > 0\">\r\n                  <div *ngFor=\"let category of topCategoriesData.slice(0, 8)\" \r\n                       class=\"category-item\">\r\n                    <div class=\"category-info\">\r\n                      <span class=\"category-name\">{{ category.name }}</span>\r\n                      <span class=\"category-count\">{{ category.value }} courses</span>\r\n                    </div>\r\n                    <div class=\"category-bar\">\r\n                      <div class=\"category-fill\" \r\n                           [style.width.%]=\"getBarHeight(category.value, getMaxCategoryValue())\"\r\n                           [style.background-color]=\"category.color\">\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"topCategoriesData.length === 0\" class=\"no-data\">\r\n                  <mat-icon>category</mat-icon>\r\n                  <p>No category data available</p>\r\n                </div>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n\r\n        </div>\r\n\r\n        <!-- Quick Actions -->\r\n        <mat-card class=\"quick-actions\">\r\n          <mat-card-header>\r\n            <mat-card-title>Quick Actions</mat-card-title>\r\n          </mat-card-header>\r\n          <mat-card-content>\r\n            <div class=\"action-buttons\">\r\n              <button mat-raised-button color=\"primary\">\r\n                <mat-icon>add</mat-icon>\r\n                New Course\r\n              </button>\r\n              <button mat-raised-button color=\"accent\">\r\n                <mat-icon>people</mat-icon>\r\n                Manage Users\r\n              </button>\r\n              <button mat-raised-button>\r\n                <mat-icon>payment</mat-icon>\r\n                View Payments\r\n              </button>\r\n              <button mat-raised-button>\r\n                <mat-icon>notifications</mat-icon>\r\n                Send Notification\r\n              </button>\r\n            </div>\r\n          </mat-card-content>\r\n        </mat-card>\r\n\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .dashboard-container {\r\n      padding: 24px;\r\n      max-width: 1400px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .dashboard-header {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 32px;\r\n      padding-bottom: 16px;\r\n      border-bottom: 1px solid #e0e0e0;\r\n    }\r\n\r\n    .dashboard-header h1 {\r\n      margin: 0;\r\n      color: #1976d2;\r\n      font-size: 2rem;\r\n      font-weight: 500;\r\n    }\r\n\r\n    .dashboard-header p {\r\n      margin: 4px 0 0 0;\r\n      color: #666;\r\n      font-size: 1rem;\r\n    }\r\n\r\n    .loading-container {\r\n      text-align: center;\r\n      padding: 40px;\r\n    }\r\n\r\n    .loading-container p {\r\n      margin-top: 16px;\r\n      color: #666;\r\n    }\r\n\r\n    .dashboard-content {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 24px;\r\n    }\r\n\r\n    /* Stats Grid */\r\n    .stats-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n      gap: 20px;\r\n      margin-bottom: 24px;\r\n    }\r\n\r\n    .stat-card {\r\n      position: relative;\r\n      overflow: hidden;\r\n      transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n    }\r\n\r\n    .stat-card:hover {\r\n      transform: translateY(-2px);\r\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n    }\r\n\r\n    .stat-card mat-card-header {\r\n      padding-bottom: 8px;\r\n    }\r\n\r\n    .stat-card mat-icon[mat-card-avatar] {\r\n      font-size: 28px;\r\n      width: 40px;\r\n      height: 40px;\r\n      line-height: 40px;\r\n    }\r\n\r\n    .course-card mat-icon[mat-card-avatar] {\r\n      background-color: #1976d2;\r\n      color: white;\r\n    }\r\n\r\n    .payment-card mat-icon[mat-card-avatar] {\r\n      background-color: #388e3c;\r\n      color: white;\r\n    }\r\n\r\n    .user-card mat-icon[mat-card-avatar] {\r\n      background-color: #f57c00;\r\n      color: white;\r\n    }\r\n\r\n    .content-card mat-icon[mat-card-avatar] {\r\n      background-color: #7b1fa2;\r\n      color: white;\r\n    }\r\n\r\n    .stat-number {\r\n      font-size: 2.5rem;\r\n      font-weight: 700;\r\n      color: #333;\r\n      margin-bottom: 8px;\r\n    }\r\n\r\n    .stat-details {\r\n      display: flex;\r\n      gap: 16px;\r\n      font-size: 0.9rem;\r\n      color: #666;\r\n    }\r\n\r\n    .stat-details .published {\r\n      color: #4caf50;\r\n      font-weight: 500;\r\n    }\r\n\r\n    .stat-details .unpublished {\r\n      color: #ff9800;\r\n      font-weight: 500;\r\n    }\r\n\r\n    /* Secondary Stats */\r\n    .secondary-stats {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: 16px;\r\n      margin-bottom: 24px;\r\n    }\r\n\r\n    .secondary-stat {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 16px;\r\n      padding: 16px;\r\n      transition: transform 0.2s ease;\r\n    }\r\n\r\n    .secondary-stat:hover {\r\n      transform: translateY(-1px);\r\n    }\r\n\r\n    .secondary-stat mat-icon {\r\n      font-size: 32px;\r\n      width: 32px;\r\n      height: 32px;\r\n      color: #1976d2;\r\n    }\r\n\r\n    .secondary-stat .number {\r\n      display: block;\r\n      font-size: 1.5rem;\r\n      font-weight: 600;\r\n      color: #333;\r\n    }\r\n\r\n    .secondary-stat .label {\r\n      display: block;\r\n      font-size: 0.9rem;\r\n      color: #666;\r\n    }\r\n\r\n    /* Charts Section */\r\n    .charts-section {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n      gap: 24px;\r\n    }\r\n\r\n    .chart-card {\r\n      min-height: 350px;\r\n    }\r\n\r\n    .chart-container {\r\n      height: 250px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    /* Donut Chart */\r\n    .donut-chart {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 32px;\r\n      width: 100%;\r\n    }\r\n\r\n    .chart-legend {\r\n      flex: 1;\r\n    }\r\n\r\n    .legend-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      margin-bottom: 12px;\r\n      font-size: 0.9rem;\r\n    }\r\n\r\n    .legend-color {\r\n      width: 16px;\r\n      height: 16px;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    .chart-visual {\r\n      position: relative;\r\n      width: 150px;\r\n      height: 150px;\r\n    }\r\n\r\n    .donut-segments {\r\n      position: relative;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    .donut-segment {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      background: conic-gradient(\r\n        from calc(var(--rotation, 0) * 1deg),\r\n        var(--color) 0deg,\r\n        var(--color) calc(var(--percentage, 0) * 3.6deg),\r\n        transparent calc(var(--percentage, 0) * 3.6deg)\r\n      );\r\n      mask: radial-gradient(circle at center, transparent 40%, black 40%);\r\n    }\r\n\r\n    .donut-center {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      text-align: center;\r\n    }\r\n\r\n    .center-number {\r\n      font-size: 1.5rem;\r\n      font-weight: 600;\r\n      color: #333;\r\n    }\r\n\r\n    .center-label {\r\n      font-size: 0.8rem;\r\n      color: #666;\r\n    }\r\n\r\n    /* Bar Charts */\r\n    .line-chart, .payment-chart {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    .chart-bars {\r\n      display: flex;\r\n      align-items: end;\r\n      gap: 8px;\r\n      height: 180px;\r\n      padding: 20px 0;\r\n    }\r\n\r\n    .bar-item, .payment-bar-item {\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      height: 100%;\r\n    }\r\n\r\n    .bar, .payment-bar {\r\n      width: 100%;\r\n      min-height: 4px;\r\n      background: linear-gradient(to top, #1976d2, #42a5f5);\r\n      border-radius: 2px 2px 0 0;\r\n      transition: all 0.3s ease;\r\n    }\r\n\r\n    .payment-bar {\r\n      background: linear-gradient(to top, #388e3c, #66bb6a);\r\n    }\r\n\r\n    .bar-item:hover .bar,\r\n    .payment-bar-item:hover .payment-bar {\r\n      opacity: 0.8;\r\n      transform: scaleY(1.05);\r\n    }\r\n\r\n    .bar-label {\r\n      font-size: 0.7rem;\r\n      color: #666;\r\n      margin-top: 8px;\r\n      text-align: center;\r\n      transform: rotate(-45deg);\r\n      white-space: nowrap;\r\n    }\r\n\r\n    .bar-value {\r\n      font-size: 0.8rem;\r\n      font-weight: 500;\r\n      color: #333;\r\n      margin-top: 4px;\r\n    }\r\n\r\n    .bar-count {\r\n      font-size: 0.7rem;\r\n      color: #666;\r\n    }\r\n\r\n    /* Category Chart */\r\n    .category-list {\r\n      width: 100%;\r\n      padding: 20px 0;\r\n    }\r\n\r\n    .category-item {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 16px;\r\n      gap: 16px;\r\n    }\r\n\r\n    .category-info {\r\n      flex: 1;\r\n      min-width: 0;\r\n    }\r\n\r\n    .category-name {\r\n      display: block;\r\n      font-weight: 500;\r\n      color: #333;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n\r\n    .category-count {\r\n      display: block;\r\n      font-size: 0.8rem;\r\n      color: #666;\r\n    }\r\n\r\n    .category-bar {\r\n      flex: 1;\r\n      height: 8px;\r\n      background: #f0f0f0;\r\n      border-radius: 4px;\r\n      overflow: hidden;\r\n    }\r\n\r\n    .category-fill {\r\n      height: 100%;\r\n      border-radius: 4px;\r\n      transition: width 0.3s ease;\r\n    }\r\n\r\n    /* No Data State */\r\n    .no-data {\r\n      text-align: center;\r\n      color: #999;\r\n      padding: 40px;\r\n    }\r\n\r\n    .no-data mat-icon {\r\n      font-size: 48px;\r\n      width: 48px;\r\n      height: 48px;\r\n      margin-bottom: 16px;\r\n      opacity: 0.5;\r\n    }\r\n\r\n    /* Quick Actions */\r\n    .quick-actions {\r\n      margin-top: 24px;\r\n    }\r\n\r\n    .action-buttons {\r\n      display: flex;\r\n      gap: 16px;\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .action-buttons button {\r\n      flex: 1;\r\n      min-width: 150px;\r\n    }\r\n\r\n    /* Responsive Design */\r\n    @media (max-width: 768px) {\r\n      .dashboard-container {\r\n        padding: 16px;\r\n      }\r\n\r\n      .dashboard-header {\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        gap: 16px;\r\n      }\r\n\r\n      .stats-grid {\r\n        grid-template-columns: 1fr;\r\n      }\r\n\r\n      .secondary-stats {\r\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n      }\r\n\r\n      .charts-section {\r\n        grid-template-columns: 1fr;\r\n      }\r\n\r\n      .donut-chart {\r\n        flex-direction: column;\r\n        gap: 16px;\r\n      }\r\n\r\n      .chart-bars {\r\n        gap: 4px;\r\n      }\r\n\r\n      .bar-label {\r\n        transform: rotate(-90deg);\r\n        font-size: 0.6rem;\r\n      }\r\n\r\n      .action-buttons {\r\n        flex-direction: column;\r\n      }\r\n\r\n      .action-buttons button {\r\n        min-width: unset;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n      .stat-number {\r\n        font-size: 2rem;\r\n      }\r\n\r\n      .secondary-stat .number {\r\n        font-size: 1.2rem;\r\n      }\r\n\r\n      .chart-container {\r\n        height: 200px;     \r\n       }\r\n    }\r\n  `],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  sessionData: LoginResponse | null;\r\n  loading = true;\r\n  stats: DashboardStats | null = null;\r\n  courseStatusData: ChartData[] = [];\r\n  userJoiningData: UserJoiningData[] = [];\r\n  paymentTrendData: PaymentTrendData[] = [];\r\n  topCategoriesData: ChartData[] = [];\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private dashboardService: DashboardService\r\n  ) {\r\n    this.sessionData = this.authService.getCurrentUser();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  loadDashboardData() {\r\n    this.loading = true;\r\n    \r\n    // Load all dashboard data\r\n    this.dashboardService.getDashboardStats().subscribe({\r\n      next: (stats) => {\r\n        this.stats = stats;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading dashboard stats:', error);\r\n      }\r\n    });\r\n\r\n    this.dashboardService.getCourseStatusChart().subscribe({\r\n      next: (data) => {\r\n        this.courseStatusData = data;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading course status data:', error);\r\n      }\r\n    });\r\n\r\n    this.dashboardService.getUserJoiningTrend().subscribe({\r\n      next: (data) => {\r\n        this.userJoiningData = data;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading user joining data:', error);\r\n      }\r\n    });\r\n\r\n    this.dashboardService.getPaymentTrend().subscribe({\r\n      next: (data) => {\r\n        this.paymentTrendData = data;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading payment trend data:', error);\r\n      }\r\n    });\r\n\r\n    this.dashboardService.getTopCategoriesChart().subscribe({\r\n      next: (data) => {\r\n        this.topCategoriesData = data;\r\n        this.loading = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading top categories data:', error);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshData() {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat('en-IN').format(amount);\r\n  }\r\n\r\n  formatDate(dateString: string): string {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\r\n  }\r\n\r\n  getPercentage(value: number, total: number): number {\r\n    return total > 0 ? (value / total) * 100 : 0;\r\n  }\r\n\r\n  getTotalCourses(): number {\r\n    return this.courseStatusData.reduce((sum, item) => sum + item.value, 0);\r\n  }\r\n\r\n  getMaxUserJoining(): number {\r\n    return Math.max(...this.userJoiningData.map(d => d.count), 1);\r\n  }\r\n\r\n  getMaxPaymentAmount(): number {\r\n    return Math.max(...this.paymentTrendData.map(d => d.amount), 1);\r\n  }\r\n\r\n  getMaxCategoryValue(): number {\r\n    return Math.max(...this.topCategoriesData.map(d => d.value), 1);\r\n  }\r\n\r\n  getBarHeight(value: number, maxValue: number): number {\r\n    return maxValue > 0 ? (value / maxValue) * 100 : 0;\r\n  }\r\n\r\n  getRotation(index: number): number {\r\n    let rotation = 0;\r\n    for (let i = 0; i < index; i++) {\r\n      rotation += this.getPercentage(this.courseStatusData[i].value, this.getTotalCourses()) * 3.6;\r\n    }\r\n    return rotation;\r\n  }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nexport const DASHBOARD_ROUTES: Routes = [\r\n  { path: '', component: DashboardComponent }\r\n];\r\n"],"mappings":"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","names":[],"x_google_ignoreList":[0,1]}